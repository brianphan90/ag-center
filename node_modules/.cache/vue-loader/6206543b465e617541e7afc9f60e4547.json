{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/StackedBarChart.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/StackedBarChart.vue","mtime":1617753126833},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jaGFydHsKCS8vIGRpc3BsYXk6IGZsZXg7CgkvLyBhbGlnbi1pdGVtczogc3RyZXRjaDsKCS8vIHdpZHRoOiAxMDAlOwoJLy8gaGVpZ2h0OiAzMDBweDsKCWhlaWdodDogMTAwJTsKCXdpZHRoOiAxMDAlOwoKCXN2ZyB7CgkvLyBmbGV4OiAyIDIgMAoJaGVpZ2h0OiAxMDAlOwoJd2lkdGg6IDcwJQoJfTsKCS5sZWdlbmR7CgkJZGlzcGxheTogaW5saW5lLWJsb2NrOwoJCXZlcnRpY2FsLWFsaWduOiB0b3A7Cgl9Cn0KCg=="},{"version":3,"sources":["StackedBarChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StackedBarChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<template lang='pug'>\n\t.chart\n\t\tsvg(ref='svg')\n\t\t.legend\n\t\t\tchart-legend(:legend='this.legend'\n\t\t\tcolumns=1)\n</template>\n\n<script>\nimport formatNumber from '@/lib/utils/formatNumber';\nimport colors from '@/assets/js/colors';\nimport BaseChart from './BaseChart';\nimport ChartLegend from '../ChartLegend';\n\nexport default {\n\tname       : 'stacked-bar-chart',\n\textends    : BaseChart,\n\tcomponents : {\n\t\tChartLegend\n\t},\n\tprops : {\n\t\tchart : {\n\t\t\ttype : Object,\n\t\t},\n\t\tlegend : {\n\t\t\ttype : Object,\n\n\t\t}\n\t},\n\n\tdata : () => ( {\n\t\t// nothing yet\n\t} ),\n\tcomputed : {\n\t\tbarWidth() {\n\t\t\tconst { aw } = this;\n\t\t\treturn Math.min( aw / this.chart.data.length, 70 );\n\t\t},\n\t\tbarSpacing() {\n\t\t\tconst { barWidth, aw } = this;\n\t\t\tconsole.log( barWidth );\n\t\t\treturn ( aw - ( barWidth * this.chart.data.length ) ) / this.chart.data.length;\n\t\t},\n\t\tlabelTextSize() {\n\t\t\treturn this.barWidth * 0.55;\n\t\t}\n\t},\n\tmounted() {\n\t\tthis.init( this.$refs.svg );\n\t},\n\tmethods : {\n\t\tdraw() {\n\t\t\tconst { values } = this.chart.data[0];\n\t\t\tconst yValues = Object.keys( values ).map( key => values[key] );\n\t\t\tconst sum = Object.keys( values ).reduce( ( total, key ) => total + values[key], 0 );\n\t\t\t// const yValues = this.chart.data[0].map( datum => datum.value );\n\t\t\tconst range   = { start : 0, end : sum };\n\n\t\t\t// draw y-axis labels\n\t\t\tconst yAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis           : 'y-right',\n\t\t\t\ttransformLabel : text => formatNumber( text ),\n\t\t\t\tlines          : {\n\t\t\t\t\tnumberOfIndicators         : 6,\n\t\t\t\t\tspaceBetweenLabelsAndLines : 10,\n\t\t\t\t},\n\t\t\t\tcolor : colors.colorPrimary,\n\t\t\t\trange,\n\t\t\t} );\n\t\t\t// console.log( yAxisData );\n\t\t\t// draw x-axis labels\n\t\t\tconst xAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis                       : 'x-bottom',\n\t\t\t\tvalues                     : this.chart.data,\n\t\t\t\tspaceBetweenLabelsAndChart : 10,\n\t\t\t\tlabelStyle                 : [\n\t\t\t\t\t['font-size', '14px'],\n\t\t\t\t\t['font-weight', '700'],\n\t\t\t\t\t['font-family', '\"Manjari\", sans-serif'],\n\t\t\t\t],\n\t\t\t} );\n\t\t\t// xAxisData.forEach( ( item, key ) => console.log( getX( key ) ) );\n\t\t\t// Compute the position and size of the bars\n\t\t\tconst barData   = this.myComputeBarData( xAxisData );\n\t\t\t// console.log( barData );\n\t\t\tconst barGroups = barData.map( variety => this.drawBars( variety ) );\n\t\t\tconsole.log( barGroups );\n\t\t\t// barGroups.forEach( grouping => grouping._groups[0].forEach( g => console.log( g.__data__.text ) ) );\n\t\t\tbarGroups.forEach( grouping => this.drawBarLabels( grouping ) );\n\n\t\t},\n\n\t\t// repeat for each item in data\n\t\tmyComputeBarData( xDims ) {\n\t\t\tconst totalData = this.chart.data.map( ( entry, i ) => {\n\t\t\t\tconst barKeys = Object.keys( entry.values );\n\t\t\t\tconst sum = barKeys.reduce( ( total, j ) => total + entry.values[j], 0 );\n\t\t\t\tlet runningSum = 0;\n\t\t\t\treturn barKeys.map( ( key ) => {\n\t\t\t\t// get the value and the height\n\t\t\t\t\tconst value  = entry.values[key];\n\t\t\t\t\tconst height = ( value / sum ) * this.ah;\n\t\t\t\t\t// determine the y value for the bar\n\t\t\t\t\tconst y = this.t + ( ( runningSum / sum ) * this.ah );\n\t\t\t\t\t// add to running sum so we can\n\t\t\t\t\t// do y value calculations\n\t\t\t\t\trunningSum += value;\n\t\t\t\t\treturn {\n\t\t\t\t\t\twidth : this.barWidth, // 30px on each side\n\t\t\t\t\t\tcolor : this.legend[key].color,\n\t\t\t\t\t\ttext  : formatNumber( value ),\n\t\t\t\t\t\tx     : this.getX( i ), // 30px to the left\n\t\t\t\t\t\ty,\n\t\t\t\t\t\theight,\n\t\t\t\t\t};\n\t\t\t\t} );\n\t\t\t} );\n\t\t\treturn totalData;\n\n\t\t},\n\n\t\tdrawBars( barData ) {\n\t\t\t// Draw the bars\n\t\t\tconst barGroups = this.canvas.selectAll( `bars-${this.id}` )\n\t\t\t\t.data( barData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'g' );\n\t\t\tbarGroups\n\t\t\t\t.append( 'rect' )\n\t\t\t\t.attr( 'x', d => d.x )\n\t\t\t\t.attr( 'y', d => d.y )\n\t\t\t\t.attr( 'fill', d => d.color )\n\t\t\t\t.attr( 'opacity', 0.80 )\n\t\t\t\t.attr( 'height', d => d.height )\n\t\t\t\t.attr( 'width', d => d.width )\n\t\t\t\t.attr( 'class', `bar-${this.id} translate-${this.id}` );\n\n\t\t\treturn barGroups;\n\t\t},\n\t\tdrawBarLabels( barGroups ) {\n\t\t\tbarGroups\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'class', `text-node-${this.id} translate-${this.id}` )\n\t\t\t\t.attr( 'x', d => ( d.x - d.width / 8 ) ) // change later to calculated value\n\t\t\t\t.attr( 'y', d => ( d.y + ( d.height + d.y ) ) / 2 - d.height / 4 )\n\t\t\t\t.attr( 'fill', d => d.color )\n\t\t\t\t.style( 'font-family', 'Bitter' )\n\t\t\t\t.attr( 'text-anchor', 'end' )\n\t\t\t\t.attr( 'dominant-baseline', 'text-before-edge' )\n\t\t\t\t// .style( 'opacity', 0 )\n\t\t\t\t.text( d => d.text );\n\t\t},\n\t\tdrawXAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\tvalues,\n\t\t\t\tspaceBetweenLabelsAndChart,\n\t\t\t\tlabelStyle,\n\t\t\t} = options;\n\n\t\t\tconst getX = ( i ) => {\n\t\t\t\tconst { aw, l } = this;\n\n\t\t\t\treturn l + ( ( aw / ( values.length + 1 ) ) * ( i + 1 ) );\n\t\t\t};\n\n\t\t\tconst xAxisData = values.map( ( datum, i ) => {\n\t\t\t\tconst y = () => ( ( axis === 'x-top' ) ? this.t : this.t + this.ah );\n\t\t\t\tconst x = () => getX( i );\n\n\t\t\t\treturn {\n\t\t\t\t\t...datum,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\ttextAnchor       : 'middle',\n\t\t\t\t\tdominantBaseline : ( axis === 'x-top' ) ? 'text-before-edge' : 'text-after-edge',\n\t\t\t\t};\n\t\t\t} );\n\n\t\t\tconst xAxisLabels = this.canvas\n\t\t\t\t.selectAll( 'x-axis-labels axis-label' )\n\t\t\t\t.data( xAxisData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'text-anchor', d => d.textAnchor )\n\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t.style( 'fill', d => d.color )\n\t\t\t\t.text( d => d.label );\n\n\t\t\tif ( labelStyle ) {\n\t\t\t\tthis.applyMethods( xAxisLabels, 'style', labelStyle );\n\t\t\t}\n\n\t\t\tconst xAxisLabelDims    = Array.from( xAxisLabels._groups[0] ).map( a => a.getBBox() );\n\t\t\tconst xAxisLabelHeights = xAxisLabelDims.map( a => a.height );\n\t\t\t// const xAxisLabelWidths  = xAxisLabelDims.map( a => a.width );\n\t\t\tconst biggestXAxisLabel = Math.max( ...xAxisLabelHeights );\n\n\t\t\tconst dims = ( () => {\n\t\t\t\tif ( axis === 'y-top' ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tt : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tb : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t};\n\t\t\t} )();\n\n\t\t\tthis.updateDims( dims );\n\t\t\tthis.realignAxisLabels();\n\n\t\t\t// ? center texts as necessary\n\t\t\t// const totalTextSpace = xAxisLabelWidths.reduce( ( sum, w ) => sum + w, 0 );\n\t\t\t// const leftOverSpace  = this.aw - totalTextSpace;\n\t\t\t// const spaceAround    = ( leftOverSpace / ( values.length + 1 ) );\n\n\t\t\treturn xAxisLabelDims;\n\n\t\t},\n\t\tgetX( i ) {\n\t\t\tconst {\n\t\t\t\tl,\n\t\t\t\tbarWidth,\n\t\t\t\tbarSpacing,\n\t\t\t} = this;\n\t\t\tconst x = l + ( barWidth * i ) + ( barSpacing * i ) + ( barSpacing / 2 );\n\t\t\treturn x;\n\t\t},\n\n\t}\n};\n</script>\n\n<style lang='scss'>\n\t.chart{\n\t\t// display: flex;\n\t\t// align-items: stretch;\n\t\t// width: 100%;\n\t\t// height: 300px;\n\t\theight: 100%;\n\t\twidth: 100%;\n\n\t\tsvg {\n\t\t// flex: 2 2 0\n\t\theight: 100%;\n\t\twidth: 70%\n\t\t};\n\t\t.legend{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t}\n\t}\n\n</style>\n"]}]}
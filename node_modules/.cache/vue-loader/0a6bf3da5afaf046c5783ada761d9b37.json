{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/ChartLegend.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/ChartLegend.vue","mtime":1615337765259},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmxlZ2VuZCB7CglkaXNwbGF5OiBncmlkOwoJZ3JpZC1jb2x1bW4tZ2FwOiAxMHB4OwoJZ3JpZC1yb3ctZ2FwOiA1cHg7CgkuaXRlbSB7CgkJZGlzcGxheTogZmxleDsKCQkvLyBhbGlnbi1pdGVtczogY2VudGVyOwoJCSY6bm90KC50aXRsZWQtbGVnZW5kLWl0ZW0pICsgLnRpdGxlZC1sZWdlbmQtaXRlbSB7CgkJCW1hcmdpbi10b3A6IDE1cHg7CgkJfQoJCS5zaGFwZSB7CgkJCW1hcmdpbi1yaWdodDogMTBweDsKCQl9CgkJcCwKCQlsYWJlbCB7CgkJCXRleHQtYWxpZ246IGxlZnQ7CgkJCWZvbnQtc2l6ZTogMTJweDsKCQl9CgkJcCB7CgkJCWZvbnQtd2VpZ2h0OiA2MDA7CgkJfQoJCXAgKyBsYWJlbCB7CgkJCW1hcmdpbi1sZWZ0OiAxMHB4OwoJCX0KCX0KfQo="},{"version":3,"sources":["ChartLegend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChartLegend.vue","sourceRoot":"src/components","sourcesContent":["<template lang='pug'>\nlegend(:style='{ gridTemplateColumns }')\n\t.item(v-for='item in shapedItems')\n\t\t.shape(\n\t\t\t:class='[item.shape || \"square\", item.style]'\n\t\t\t:style='getStyle( item )'\n\t\t)\n\t\tlabel.dynamic-mode-text {{ item.label }}\n\t.item.titled-legend-item(\n\t\tv-for='( item, i ) in titledItems'\n\t\t:style='{ gridRowStart : numberOfRowsOfShapedItems + i + 1, gridColumn : `1 / ${numberOfColumns + 1}` }'\n\t)\n\t\tp.legend-item-title.dynamic-mode-text {{ item.title }}\n\t\tlabel.dynamic-mode-text {{ item.label }}\n</template>\n\n<script>\nexport default {\n\tname  : 'chart-legend',\n\tprops : {\n\t\tlegend : {\n\t\t\ttype     : [Object, Array],\n\t\t\trequired : true,\n\t\t},\n\t\tcolumns : {\n\t\t\ttype    : [Number, String],\n\t\t\tdefault : 4,\n\t\t}\n\t},\n\tcomputed : {\n\t\tgridTemplateColumns() {\n\t\t\tif ( typeof this.columns === 'string' ) {\n\t\t\t\treturn this.columns;\n\t\t\t}\n\t\t\tlet str = '';\n\t\t\tfor ( let i = 0; i < this.columns; i += 1 ) {\n\t\t\t\tstr += 'auto';\n\t\t\t\tif ( i < ( this.columns - 1 ) ) {\n\t\t\t\t\tstr += ' ';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\t\tnumberOfColumns() {\n\t\t\treturn this.gridTemplateColumns.split( ' ' ).length;\n\t\t},\n\t\tshapedItemKeys() {\n\t\t\tif ( Array.isArray( this.legend ) ) {\n\t\t\t\treturn this.legend.map( ( item, i ) => i )\n\t\t\t\t\t.sort( ( a, b ) => a.order - b.order );\n\t\t\t}\n\t\t\treturn Object.keys( this.legend ).filter( key => !this.legend[key].title )\n\t\t\t\t.sort( ( a, b ) => a.order - b.order );\n\t\t},\n\t\tremainderInFinalRow() {\n\t\t\treturn this.shapedItemKeys.length % this.numberOfColumns;\n\t\t},\n\t\tnumberOfRowsOfShapedItems() {\n\t\t\treturn this.numberOfFullRowsOfShapedItems + ( this.remainderInFinalRow ? 1 : 0 );\n\t\t},\n\t\tnumberOfFullRowsOfShapedItems() {\n\t\t\treturn Math.floor( this.shapedItemKeys.length / this.numberOfColumns );\n\t\t},\n\t\tshapedItems() {\n\t\t\tconst { numberOfColumns } = this;\n\t\t\tconst shapedItems = [];\n\t\t\t// the idea is that we want the items to display top to bottom moving\n\t\t\t// on to another column once the first column is finished instead of\n\t\t\t// the default moving from one row to the next after the row is filled\n\t\t\tfor ( let i = 0; i < this.shapedItemKeys.length; i += 1 ) {\n\t\t\t\tconst colNum     = ( i % numberOfColumns );\n\t\t\t\tconst rowNum     = Math.floor( i / numberOfColumns );\n\t\t\t\tlet desiredIndex = ( colNum * this.numberOfFullRowsOfShapedItems ) + rowNum;\n\t\t\t\tif ( this.remainderInFinalRow && ( colNum + 1 ) > this.remainderInFinalRow ) {\n\t\t\t\t\tdesiredIndex += 1;\n\t\t\t\t}\n\t\t\t\tshapedItems.push( this.legend[this.shapedItemKeys[desiredIndex]] );\n\t\t\t}\n\n\t\t\treturn shapedItems;\n\t\t},\n\t\ttitledItems() {\n\t\t\tif ( Array.isArray( this.legend ) ) {\n\t\t\t\treturn this.legend.filter( item => item.title )\n\t\t\t\t\t.sort( ( a, b ) => a.order - b.order );\n\t\t\t}\n\t\t\tconst keys = Object.keys( this.legend );\n\t\t\treturn keys.filter( key => this.legend[key].title )\n\t\t\t\t.map( key => this.legend[key] )\n\t\t\t\t.sort( ( a, b ) => a.order - b.order );\n\t\t}\n\t},\n\tmethods : {\n\t\tgetStyle( item ) {\n\t\t\tif ( item.style === 'striped' ) {\n\t\t\t\treturn {\n\t\t\t\t\tborder     : `2px solid ${item.color}`,\n\t\t\t\t\tbackground : `repeating-linear-gradient(\n\t\t\t\t\t\ttransparent 4px,\n\t\t\t\t\t\t${item.color} 4px,\n\t\t\t\t\t\t${item.color} 5px,\n\t\t\t\t\t\ttransparent 5px,\n\t\t\t\t\t\ttransparent 7px,\n\t\t\t\t\t\t${item.color} 7px,\n\t\t\t\t\t\t${item.color} 8px\n\t\t\t\t\t)`\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbackgroundColor   : item.color,\n\t\t\t\tborderBottomColor : item.color\n\t\t\t};\n\t\t},\n\t},\n};\n</script>\n\n<style lang='scss'>\nlegend {\n\tdisplay: grid;\n\tgrid-column-gap: 10px;\n\tgrid-row-gap: 5px;\n\t.item {\n\t\tdisplay: flex;\n\t\t// align-items: center;\n\t\t&:not(.titled-legend-item) + .titled-legend-item {\n\t\t\tmargin-top: 15px;\n\t\t}\n\t\t.shape {\n\t\t\tmargin-right: 10px;\n\t\t}\n\t\tp,\n\t\tlabel {\n\t\t\ttext-align: left;\n\t\t\tfont-size: 12px;\n\t\t}\n\t\tp {\n\t\t\tfont-weight: 600;\n\t\t}\n\t\tp + label {\n\t\t\tmargin-left: 10px;\n\t\t}\n\t}\n}\n</style>\n"]}]}
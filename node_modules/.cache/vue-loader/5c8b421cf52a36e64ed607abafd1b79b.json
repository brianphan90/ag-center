{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/simpleBarChart.vue?vue&type=style&index=0&id=a4c1f612&lang=scss&scoped=true&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/simpleBarChart.vue","mtime":1617306816594},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgouY2hhcnQgewoJaGVpZ2h0OjI1MHB4Owp9Ci5iYXJjbGFzcyB7Cn0KLnRleHRjbGFzcyB7Cgljb2xvcjpyZWQ7Cglmb250LXNpemU6OHB4Owp9Cg=="},{"version":3,"sources":["simpleBarChart.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"simpleBarChart.vue","sourceRoot":"src/components/charts","sourcesContent":["\r\n<template lang=\"pug\">\r\n\tb-container.test(fluid)\r\n\t\t.h6 D3 barchart\r\n\t\t.chart#chartData\r\n</template>\r\n\r\n<style lang=\"scss\"scoped>\r\n\t.chart {\r\n\t\theight:250px;\r\n\t}\r\n\t.barclass {\r\n\t}\r\n\t.textclass {\r\n\t\tcolor:red;\r\n\t\tfont-size:8px;\r\n\t}\r\n</style>\r\n\r\n<script>\r\n/* eslint-disable */\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n\tname       : 'simple-bar-chart',\r\n\tcomponents : {\r\n\t\t// nothing yet\r\n\t},\r\n\tprops : {\r\n\t\tbarColor : {\r\n\t\t\ttype : String\r\n\t\t},\r\n\t\theight : {\r\n\t\t\ttype : String\r\n\t\t},\r\n\t\twidth : {\r\n\t\t\ttype : String\r\n\t\t},\r\n\t\tmaxBars : {\r\n\t\t\ttype : Number\r\n\t\t},\r\n\t\tnumVerticleTicks : {\r\n\t\t\ttype : Number\r\n\t\t},\r\n\t\tsomeParam : {\r\n\t\t\ttype : Number\r\n\t\t},\r\n\t\troundedCorners : {\r\n\t\t\ttype : Number\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n\t\t// console.log('mounted simpleBarChart');\r\n\t\tthis.init();\r\n\t},\r\n\tmethods : {\r\n\t\tshortnum( nums ) {\r\n\t\t\tlet num = nums;\r\n\t\t\tnum = Number( num / 1000 ).toPrecision( 2 );\r\n\t\t\tnum = num.replace( /^0+/, '' );\r\n\t\t\tnum += 'k';\r\n\t\t\t// console.log( `translate: ${num}` );\r\n\t\t\treturn num;\r\n\t\t},\r\n\t\tinit() {\r\n\t\t\t// Parameters available to the d3 scope\r\n\t\t\tconst height = ( ( this.height ) ? this.height : '100%' );\r\n\t\t\tconst width = ( ( this.width ) ? this.width : '100%' );\r\n\t\t\tconst barwidth = ( ( this.barwidth ) ? this.barwidth : 20 );\r\n\t\t\tconst barpadding = ( ( this.barpadding ) ? this.barpadding : 10 );\r\n\t\t\tconst barclass = ( ( this.barclass ) ? this.barclass : 'barclass' );\r\n\t\t\tconst barColor = ( ( this.barColor ) ? this.barColor : 'red' );\r\n\t\t\tconst tickColor = ( ( this.tickColor ) ? this.tickColor : 'grey' );\r\n\t\t\tconst roundedCorners = ( ( this.roundedCorners ) ? this.roundedCorners : '5' );\r\n\t\t\tconst textclass = ( ( this.textclass ) ? this.textclass : 'textclass' );\r\n\t\t\tconst yTickWidth = ( ( this.y_tickWidth ) ? this.y_tickwidth : 200 );\r\n\t\t\tconst yTickCount = this.tick_y.length;\r\n\r\n\t\t\t// unscaled margins\r\n\t\t\tlet margin = {\r\n\t\t\t\ttop    : 10,\r\n\t\t\t\tbottom : 15,\r\n\t\t\t\tleft   : 10,\r\n\t\t\t\tright  : 10,\r\n\t\t\t};\r\n\r\n\t\t\tconst xDomainScale = ( this.chart_data.length * ( barwidth + ( barpadding * 2 ) ) );\r\n\t\t\tconst x = d3.scaleLinear()\r\n\t\t\t\t  .domain( [0, xDomainScale] )\r\n\t\t\t\t  .range( [0, width] );\r\n\r\n\t\t\tconst y = d3.scaleLinear()\r\n\t\t\t\t  .domain( [0, d3.max( this.chart_data )] )\r\n\t\t\t\t  .range( [0, ( height - margin.top - margin.bottom )] );\r\n\r\n\t\t\t// scaled margins\r\n\t\t\tmargin = {\r\n\t\t\t\ttop    : y( margin.top ),\r\n\t\t\t\tbottom : y( margin.bottom ),\r\n\t\t\t\tleft   : x( margin.left ),\r\n\t\t\t\tright  : x( margin.right ),\r\n\t\t\t};\r\n\r\n\t\t\tconst chartObject = [];\r\n\t\t\tlet cnt = 0;\r\n\t\t\tfor ( const li in this.chart_data ) {\r\n\t\t\t\tconst chart_item = {\r\n\t\t\t\t\t'chart_item' : this.chart_data[li],\r\n\t\t\t\t\t'num'        : cnt,\r\n\t\t\t\t\t'tick_x'     : this.tick_x[li],\r\n\t\t\t\t\t'tick_y'     : this.tick_y[li],\r\n\t\t\t\t\t'barColor'   : this.byBarColor[li]\r\n\t\t\t\t};\r\n\t\t\t\tchart_object.push( chart_item );\r\n\t\t\t\tcnt++;\r\n\t\t\t}\r\n\r\n\t\t\tconst container = document.getElementById( 'chartData' );\r\n\t\t\tif ( container ) {\r\n\t\t\t\tconst chart = d3.create( 'svg' )\r\n\t\t\t\t\t  .style( 'font', '22px sans-serif' )\r\n\t\t\t\t\t  .style( 'text-align', 'right' )\r\n\t\t\t\t\t  .style( 'color', 'white' )\r\n\t\t\t\t\t  .style( 'height', height )\r\n\t\t\t\t\t  .style( 'width', width )\r\n\t\t\t\t\t  .style( 'margin-left', margin.left )\r\n\t\t\t\t\t  .style( 'margin-right', margin.right );\r\n\r\n\t\t\t\t// Draw Bottom Line\r\n\t\t\t\tchart.append( 'line' )\r\n\t\t\t\t\t.style( 'stroke', '#444' )\r\n\t\t\t\t\t.style( 'stroke-width', 1 )\r\n\t\t\t\t\t.attr( 'x1', 0 )\r\n\t\t\t\t\t.attr( 'x2', x( width - yTickWidth ) )\r\n\t\t\t\t\t.attr( 'y1', height - margin.bottom + 2 )\r\n\t\t\t\t\t.attr( 'y2', height - margin.bottom + 2 );\r\n\r\n\t\t\t\t// Bottom Line Shadow\r\n\t\t\t\tchart.append( 'line' )\r\n\t\t\t\t\t.style( 'stroke', '#CCC' )\r\n\t\t\t\t\t.style( 'stroke-width', 1 )\r\n\t\t\t\t\t.attr( 'x1', 0 )\r\n\t\t\t\t\t.attr( 'x2', ( width - yTickWidth ) )\r\n\t\t\t\t\t.attr( 'y1', height - margin.bottom + 3 )\r\n\t\t\t\t\t.attr( 'y2', height - margin.bottom + 3 );\r\n\r\n\t\t\t\t// Draw Bars\r\n\t\t\t\tchart.selectAll( 'svg' )\r\n\t\t\t\t\t.data( chart_object )\r\n\t\t\t\t\t.join( 'rect' )\r\n\t\t\t\t\t.attr( 'fill', d => ( ( d.barColor ) ? d.barColor : barColor ) )\r\n\t\t\t\t\t.attr( 'class', barclass )\r\n\t\t\t\t\t.attr( 'height', d => `${y( d.chart_item )}px` )\r\n\t\t\t\t\t.attr( 'width', x( barwidth ) )\r\n\t\t\t\t\t.attr( 'rx', x( roundedCorners ) )\r\n\t\t\t\t\t.attr( 'x', d => `${x( margin.left + ( d.num * ( barwidth + barpadding * 2 ) ) )}px` )\r\n\t\t\t\t\t.attr( 'y', d => `${y( height - y( d.chart_item ) - margin.bottom )}px` );\r\n\r\n\t\t\t\t// Draw Numbers Above Bars\r\n\t\t\t\tchart.selectAll( 'svg' )\r\n\t\t\t\t\t.data( chart_object )\r\n\t\t\t\t\t.join( 'text' )\r\n\t\t\t\t\t.attr( 'font-size', '{y(12)+\\'px\\')}' )\r\n\t\t\t\t\t.attr( 'fill', d => ( ( d.barColor ) ? d.barColor : barColor ) )\r\n\t\t\t\t\t.attr( 'class', textclass )\r\n\t\t\t\t\t.attr( 'height', '20' )\r\n\t\t\t\t\t.attr( 'width', ( barwidth + barpadding ) )\r\n\t\t\t\t\t.attr( 'x', d => `${x( ( margin.left - 1 ) + ( d.num * ( barwidth + barpadding * 2 ) ) )}px` )\r\n\t\t\t\t\t.attr( 'y', d => `${y( height - y( d.chart_item ) - 20 )}px` )\r\n\t\t\t\t\t.text( d => this.shortnum( d.chart_item ) );\r\n\r\n\t\t\t\t// Draw X axis ticks\r\n\t\t\t\tchart.selectAll( 'svg' )\r\n\t\t\t\t\t.data( chart_object )\r\n\t\t\t\t\t.join( 'text' )\r\n\t\t\t\t\t.attr( 'font-size', '{y(12)+\\'px\\')}' )\r\n\t\t\t\t\t.attr( 'fill', tickColor )\r\n\t\t\t\t\t.attr( 'class', textclass )\r\n\t\t\t\t\t.attr( 'height', '20' )\r\n\t\t\t\t\t.attr( 'width', ( barwidth + barpadding ) )\r\n\t\t\t\t\t.attr( 'x', d => `${x( margin.left - 2 + ( d.num * ( barwidth + barpadding * 2 ) ) )}px` )\r\n\t\t\t\t\t.attr( 'y', y( 1230 ) )\r\n\t\t\t\t\t.text( d => d.tick_x );\r\n\r\n\t\t\t\t// Draw Y axis ticks\r\n\t\t\t\tchart.selectAll( 'svg' )\r\n\t\t\t\t\t.data( this.tick_y )\r\n\t\t\t\t\t.join( 'text' )\r\n\t\t\t\t\t.attr( 'font-size', '{y(12)+\\'px\\')}' )\r\n\t\t\t\t\t.attr( 'fill', 'grey' )\r\n\t\t\t\t\t.attr( 'width', y_tickWidth )\r\n\t\t\t\t\t.attr( 'x', x( width - yTickWidth ) )\r\n\t\t\t\t\t.attr( 'y', ( d, i ) => {\r\n\t\t\t\t\t\t// console.log( `total width: ${height + margin.top + margin.bottom}` );\r\n\t\t\t\t\t\t// console.log( `increment length: ${( height + margin.top + margin.bottom ) / yTickCount}` );\r\n\t\t\t\t\t\t// console.log( `final number: ${( ( Number( height ) + Number( margin.top ) + Number( margin.bottom ) ) / y_tick_count ) * i}` );\r\n\t\t\t\t\t\treturn ( ( ( Number( height ) + Number( margin.top ) + Number( margin.bottom ) ) / yTickCount ) * i );\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.text( d => d );\r\n\t\t\t\tcontainer.appendChild( chart.node() );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// console.log( 'Something bad happened!' );\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tdata : () => ( {\r\n\t\tchart_data : [680, 730, 750, 871, 1024, 138],\r\n\t\ttick_x     : ['2015', '2016', '2017', '2018', '2019', '2020'],\r\n\t\ttick_y     : ['1.25k', '1k', '.75k', '.50k', '.25k', '0k'],\r\n\t\tbyBarColor : [null, null, null, 'blue', null, null]\r\n\t} )\r\n};\r\n</script>\r\n"]}]}
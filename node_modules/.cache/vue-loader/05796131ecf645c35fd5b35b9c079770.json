{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/views/app/EntitySummary.vue?vue&type=style&index=0&id=6df784ea&lang=scss&scoped=true&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/views/app/EntitySummary.vue","mtime":1620066313727},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJhckNoYXJ0ewoJbWFyZ2luOmF1dG87Cgl3aWR0aDogMTAwJTsKCWhlaWdodDogNzAlOwoJZGlzcGxheTogZmxleDsKCgp9Ci8vIC5jaGFydFdpdGhMZWdlbmR7Ci8vIAkJbWFyZ2luOiBhdXRvOwovLyAJCWhlaWdodDogNzAlOwovLyAJCWRpc3BsYXk6IGZsZXg7Ci8vIH0KCgo="},{"version":3,"sources":["EntitySummary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA","file":"EntitySummary.vue","sourceRoot":"src/views/app","sourcesContent":["<template lang=\"pug\">\n\n\tb-container.summary-view(fluid v-if=\"!showEmail\")\n\t\tb-row.header(align-v=\"center\")\n\t\t\tb-col\n\t\t\t\th1.title Entity Summary\n\t\t\t\th6.sub-title {{getContractName}}\n\t\tb-row.button-section(align-v=\"center\")\n\t\t\tb-col\n\t\t\t\tb-button.btn.dark-btn.mr-3(@click=\"toggleEmail\")\n\t\t\t\t\tspan.pr-2.align-middle\n\t\t\t\t\t\tBIconEnvelope\n\t\t\t\t\t| Email\n\t\t\t\tb-button.btn\n\t\t\t\t\tspan.pr-2.align-middle\n\t\t\t\t\t\tBIconDownload\n\t\t\t\t\t| Save\n\t\tb-row.chart-section\n\t\t\tb-col\n\t\t\t\tGraphCardDeck(:chartData='finalChartData')\n\tEmail(v-else :only-title=\"this.$route.name\" email-page-type=\"summary\" :email-type=\"this.$route.name\")\n</template>\n\n<style lang=\"scss\" scoped>\n.barChart{\n\tmargin:auto;\n\twidth: 100%;\n\theight: 70%;\n\tdisplay: flex;\n\n\n}\n// .chartWithLegend{\n// \t\tmargin: auto;\n// \t\theight: 70%;\n// \t\tdisplay: flex;\n// }\n\n\n</style>\n\n<script>\n\nimport StackedBarChart from '@/components/charts/StackedBarChart';\nimport BarChart from '@/components/charts/BarChart';\n\nimport Swiper, { Navigation, Pagination } from 'swiper';\n\nimport { BIconDownload, BIconEnvelope } from 'bootstrap-vue';\nimport GraphCardDeck from '@/components/GraphCardDeck';\nimport Email from '@/components/Email';\nimport colors from '@/assets/js/colors';\nimport SbarChart from '@/components/charts/fBarChart';\nimport SummaryView from '../../components/Summary';\nimport ChartLegend from '../../components/ChartLegend';\n\nexport default {\n\tname       : 'entity-summary',\n\tcomponents : {\n\t\tStackedBarChart,\n\t\tSummaryView,\n\t\tChartLegend,\n\t\tBIconDownload,\n\t\tBIconEnvelope,\n\t\tBarChart,\n\t\tEmail,\n\t\tSbarChart,\n\t\tGraphCardDeck\n\t},\n\tprops : {\n\t},\n\n\tcomputed : {\n\t\tgetSelectedContractNum() {\n\t\t\treturn this.$store.getters.selectedContract.contractNum.toString();\n\t\t},\n\t\tEntitySummaryData() {\n\t\t\treturn this.$store.getters.entitySummaryData;\n\t\t},\n\t\tgetContractName() {\n\t\t\tconst name = this.$store.getters.selectedContract.contractName;\n\t\t\treturn name;\n\t\t},\n\t},\n\n\tmethods : {\n\t\tinitSwiper() {\n\t\t\tconst self = this;\n\t\t\tconst { swiper } = this.$refs;\n\t\t\tSwiper.use( [Navigation, Pagination] );\n\t\t\tthis.swiper = new Swiper( swiper, {\n\t\t\t\t// auto initialize this swiper\n\t\t\t\tinit         : true,\n\t\t\t\tinitialSlide : this.activeSlide,\n\n\t\t\t\t// swiper settings\n\t\t\t\tslidesPerView : 1,\n\t\t\t\tdirection     : 'horizontal',\n\t\t\t\tpagination    : {\n\t\t\t\t\tel   : '.swiper-pagination',\n\t\t\t\t\ttype : 'bullets'\n\t\t\t\t},\n\t\t\t\ton : {\n\t\t\t\t\tslideChangeTransitionEnd() {\n\t\t\t\t\t\tself.activeSlide = this.activeIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t\ttoggleEmail() {\n\t\t\tthis.showEmail = !this.showEmail;\n\t\t},\n\t\tTotalPoundsProduced() {\n\t\t},\n\t\tInsectQuery() {\n\n\t\t},\n\t\tQualityQuery() {\n\t\t},\n\t\tQueryAll() {\n\t\t},\n\t\tGrabUpdatedData() {\n\t\t\tconst data = this.$store.getters.entitySummaryData;\n\t\t\treturn data;\n\t\t},\n\t\tgetInsectDamageData() {\n\t\t\tconst insectData = this.chartData.InsectDamage.chartData.find( item => item.year === this.InsectDamageYear );\n\t\t\treturn ( {\n\t\t\t\tdata : [{\n\t\t\t\t\tvalue    : insectData.data[0].TotalInsect,\n\t\t\t\t\tlabel    : 'All Fields',\n\t\t\t\t\tbarColor : colors.insectColor\n\t\t\t\t}],\n\t\t\t\tuserBarWidth : 70,\n\t\t\t\toptions      : {\n\t\t\t\t\thasBarLabels : false\n\t\t\t\t},\n\t\t\t\ttitle    : 'Insect Damage',\n\t\t\t\tsubtitle : 'This shows the overall impact insects had on your crops this year',\n\t\t\t\ttype     : 'barChart'\n\t\t\t} );\n\t\t},\n\t\tgetAllInsectDamageData() {\n\t\t\tconst data = this.chartData.InsectDamage.chartData.map( item => ( {\n\t\t\t\tyear : item.year,\n\t\t\t\tdata : [{\n\t\t\t\t\tvalue    : item.data[0].TotalInsect,\n\t\t\t\t\tlabel    : 'All Fields',\n\t\t\t\t\tbarColor : colors.insectColor\n\t\t\t\t}],\n\t\t\t} ) );\n\t\t\treturn ( {\n\t\t\t\ttitle         : 'Insect Damage',\n\t\t\t\tsubtitle      : 'This shows the overall impact insects had on your crops this year',\n\t\t\t\ttype          : 'InsectBarChart',\n\t\t\t\tmultipleYears : true,\n\t\t\t\tuserBarWidth  : 70,\n\t\t\t\toptions       : {\n\t\t\t\t\tuserBarWidth : 70,\n\t\t\t\t\thasBarLabels : false\n\t\t\t\t},\n\t\t\t\tallData : data\n\t\t\t} );\n\t\t},\n\t\tgetPayableYieldData() {\n\t\t\tconst payableData = this.chartData.PayableYield.chartData.map( variety => ( {\n\t\t\t\tvalue      : variety.data.TotalPayable,\n\t\t\t\tlabel      : variety.year,\n\t\t\t\tbarColor   : '#ED1C24',\n\t\t\t\tlabelColor : '#ED1C24'\n\t\t\t} ) );\n\t\t\treturn ( {\n\t\t\t\tdata          : payableData,\n\t\t\t\tmultipleYears : false,\n\t\t\t\toptions       : {\n\t\t\t\t\thasBarLabels : true\n\t\t\t\t},\n\t\t\t\ttitle    : 'Payable Yield Trends',\n\t\t\t\tsubtitle : 'This shows your payable yield from the last three years'\n\t\t\t} );\n\t\t},\n\t\tgetAllPayableYieldData() {\n\t\t\tconst payableData = this.chartData.PayableYield.chartData.map( variety => ( {\n\t\t\t\tvalue      : variety.data.TotalPayable,\n\t\t\t\tlabel      : variety.year,\n\t\t\t\tbarColor   : '#ED1C24',\n\t\t\t\tlabelColor : '#ED1C24'\n\t\t\t} ) );\n\t\t\treturn ( {\n\t\t\t\tallData : [{\n\t\t\t\t\tdata : payableData\n\t\t\t\t}],\n\t\t\t\tmultipleYears : false,\n\t\t\t\toptions       : {\n\t\t\t\t\thasBarLabels : true\n\t\t\t\t},\n\t\t\t\ttitle    : 'Payable Yield Trends',\n\t\t\t\tsubtitle : 'This shows your payable yield from the last three years',\n\t\t\t\ttype     : 'PayableBarChart'\n\t\t\t} );\n\t\t},\n\t\tgetQualitySummaryData() {\n\t\t\tconst qualityData = this.chartData.QualitySummary.chartData.find( item => item.year === this.QualitySummaryYear );\n\t\t\tlet i = 0;\n\t\t\tconst toRet = [];\n\t\t\t// eslint-disable-next-line no-restricted-syntax\n\t\t\tfor ( const [key, value] of Object.entries( qualityData.data[0] ) ) {\n\t\t\t\ttoRet.push( {\n\t\t\t\t\tlabel      : key,\n\t\t\t\t\tvalue,\n\t\t\t\t\tbarColor   : colors.qualityColors[i],\n\t\t\t\t\tlabelColor : colors.qualityColors[i++],\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn ( {\n\t\t\t\tdata     : toRet,\n\t\t\t\ttitle    : 'Quality Summary',\n\t\t\t\tsubtitle : 'This is the quality of crop you produced this year'\n\t\t\t} );\n\t\t},\n\t\tgetAllQualitySummaryData() {\n\t\t\tconst data = this.chartData.QualitySummary.chartData.map( ( item ) => {\n\t\t\t\tconst toRet = [];\n\t\t\t\tlet i = 0;\n\t\t\t\t// eslint-disable-next-line no-restricted-syntax\n\t\t\t\tfor ( const [key, value] of Object.entries( item.data[0] ) ) {\n\t\t\t\t\ttoRet.push( {\n\t\t\t\t\t\tlabel      : key,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tbarColor   : colors.qualityColors[i],\n\t\t\t\t\t\tlabelColor : colors.qualityColors[i++],\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\treturn ( {\n\n\t\t\t\t\tyear : item.year,\n\t\t\t\t\tdata : toRet\n\n\t\t\t\t} );\n\n\t\t\t} );\n\t\t\treturn ( {\n\t\t\t\ttitle    : 'Quality Summary',\n\t\t\t\tsubtitle : 'This is the quality of crop you produced this year',\n\t\t\t\toptions  : {\n\t\t\t\t\thasBarLabels : true\n\t\t\t\t},\n\t\t\t\tallData       : data,\n\t\t\t\ttype          : 'barChart',\n\t\t\t\tmultipleYears : true\n\t\t\t} );\n\t\t}\n\t},\n\n\tcreated() {\n\t\tif ( this.EntitySummaryData.InsectDamage.chartData.length < 1 ) {\n\t\t\tthis.$store.dispatch( 'setEntitySummaryDataInsectDamage', this.getSelectedContractNum );\n\t\t}\n\t\tif ( this.EntitySummaryData.PayableYield.chartData.length < 1 ) {\n\t\t\tthis.$store.dispatch( 'setEntitySummaryDataPayableYield', this.getSelectedContractNum );\n\t\t}\n\n\t\tif ( this.EntitySummaryData.QualitySummary.chartData.length < 1 ) {\n\t\t\tthis.$store.dispatch( 'setEntitySummaryDataQualitySummary', this.getSelectedContractNum );\n\t\t}\n\n\t\tthis.chartData = this.GrabUpdatedData();\n\t\tthis.insectChartData = this.getInsectDamageData();\n\t\tthis.PayableYieldData = this.getPayableYieldData();\n\t\tthis.qualitySummaryData = this.getQualitySummaryData();\n\t\tthis.AllPayableYieldData = this.getAllPayableYieldData();\n\t\tthis.AllInsectChartData = this.getAllInsectDamageData();\n\t\tthis.AllQualitySummaryData = this.getAllQualitySummaryData();\n\t\tthis.finalChartData = [this.AllPayableYieldData, this.AllQualitySummaryData, this.AllInsectChartData];\n\t},\n\n\tmounted() {\n\t\tthis.$nextTick( () => {\n\t\t\tthis.initSwiper();\n\t\t} );\n\t},\n\n\twatch : {\n\t\tInsectDamageYear() {\n\t\t\tthis.insectChartData = this.getInsectDamageData();\n\t\t},\n\t\tQualitySummaryYear() {\n\t\t\tthis.qualitySummaryData = this.getQualitySummaryData();\n\t\t}\n\t},\n\t// were gonna need to sync our props along with our queries when summary filters\n\n\tdata : () => ( {\n\t\ttotalPoundsProducedRes : null,\n\t\tinsectQueryRes         : null,\n\t\tqualityQueryRes        : null,\n\t\tQualitySummaryYear     : 2018,\n\t\tInsectDamageYear       : 2018, // need to dynamically pull years and set\n\t\tcropYearArg            : 2018,\n\t\tfinalChartData         : null,\n\t\tAllPayableYieldData    : null,\n\t\tAllInsectChartData     : null,\n\t\tAllQualitySummaryData  : null,\n\t\tinsectChartData        : null,\n\t\tPayableYieldData       : null,\n\t\tqualitySummaryData     : null,\n\t\toptions                : [\n\t\t\t{ value : 2018, text : '2018' },\n\t\t\t{ value : 2019, text : '2019' },\n\t\t\t{ value : 2020, text : '2020' }\n\t\t],\n\t\tswiper      : null,\n\t\tactiveSlide : 0,\n\t\tshowEmail   : false,\n\t\tchartData   : null\n\t} ),\n};\n</script>\n\n<style lang=\"scss\"scoped>\n.summary-view {\n\tbackground: #f1f9f5;\n\tcolor: #026a44;\n\tfont-family: Bitter;\n\theight: 88%;\n}\n.barhart {\n\tbackground: #CCFFCC;\n}\n.header {\n\ttext-align: left;\n\theight: 25%;\n\tbackground: $color;\n\t.title {\n\t\ttext-align: left;\n\t\tfont-weight: bold;\n\t\tfont-size: 36px;\n\t\tfont-family: Bitter;\n\t}\n\t.sub-title {\n\t\tfont-weight: bold;\n\t\tfont-size: 24px;\n\t\tline-height: 100%;\n\t\tfont-family: Bitter;\n\t}\n}\n.button-section {\n\theight: 10%;\n\ttext-align: left;\n\tmargin-top: -34px;\n\tmargin-bottom: 20px;\n}\n.chart-section {\n\theight: 65%;\n}\n.btn {\n\tbackground: $color-secondary;\n\tbox-shadow: 0px 2px 15px rgba(14, 51, 63, 0.15), 0px 2px 3px rgba(14, 51, 63, 0.15);\n\tborder-radius: 50px;\n\twidth: 135px;\n\theight: 50px;\n\tfont-family: Manjari;\n\tborder: none;\n\tfont-size: 17px;\n}\n.btn:hover,\n.btn:active,\n.btn:focus {\n\tbackground: $color-primary;\n}\n.dark-btn{\n\tbackground: $color-primary\n}\n.graph-card {\n\tbackground: $color;\n\tborder-radius: 20px;\n}\n.swiper-container {\n\theight: 95%;\n}\n.swiper-wrapper {\n\theight: 85%;\n}\n.chart-title {\n\tfont-family: Manjari;\n\tfont-style: normal;\n\tfont-weight: bold;\n\tfont-size: 30px;\n\tline-height: 30px;\n\talign-items: center;\n\tcolor: #5A726A;\n\tpadding-top: 20px;\n}\n.chart-sub-title {\n\tfont-family: Manjari;\n\tfont-style: normal;\n\tfont-weight: bold;\n\tfont-size: 12px;\n\tline-height: 12px;\n\talign-items: center;\n\tcolor: #5A726A;\n\tpadding-top: 0px;\n}\n\n</style>\n"]}]}
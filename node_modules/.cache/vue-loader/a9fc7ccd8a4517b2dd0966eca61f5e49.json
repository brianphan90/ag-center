{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/LineChart.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/LineChart.vue","mtime":1617734622980},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxpbmUtY2hhcnQgewoJZGlzcGxheTogZmxleDsKCWFsaWduLWl0ZW1zOiBzdHJldGNoOwoJd2lkdGg6IDEwMCU7CgoJYXNpZGUgewoJCS8vIGRpc3BsYXk6IGZsZXg7CgkJLy8gZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKCQlqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CgkJLy8gZmxleDogMSAxIDA7CgoJCWxlZ2VuZCB7CgkJCXRleHQtYWxpZ246IGxlZnQ7CgoJCQloMSwKCQkJaDIgewoJCQkJZGlzcGxheTogaW5saW5lLWJsb2NrOwoJCQkJdGV4dC1hbGlnbjogbGVmdDsKCQkJfQoKCQkJaDEgewoJCQkJZm9udC13ZWlnaHQ6IDcwMDsKCQkJCWNvbG9yOiAkY29sb3ItYWNjZW50OwoJCQl9CgoJCQloMiB7CgkJCQlmb250LWZhbWlseTogIk1hbmphcmkiLCBzYW5zLXNlcmlmOwoJCQkJZm9udC1zaXplOiAxOHB4OwoJCQkJZm9udC13ZWlnaHQ6IDQwMDsKCQkJfQoJCX0KCgkJZm9vdGVyIHAgewoJCQlmb250LWZhbWlseTogJ01hbmphcmknLCBzYW5zLXNlcmlmOwoJCQl0ZXh0LWFsaWduOiBsZWZ0OwoJCQlmb250LXNpemU6IDEycHg7CgoJCQlzcGFuIHsKCQkJCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCQkJfQoJCX0KCX0KCglzdmcgewoJCWZsZXg6IDIgMiAwOwoJfQp9Cg=="},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<template lang='pug'>\n.line-chart(:id='id')\n\taside\n\t\tlegend\n\t\t\th1 {{ total }}\n\t\t\th2 {{ chart.label }}\n\t\tfooter\n\t\t\tp\n\t\t\t\tspan Last updated\n\t\t\t\tspan {{ lastUpdated }}\n\t//- can now be found by\n\t//- using this.$refs.svg\n\tsvg(ref='svg')\n\t\tdefs\n\t\t\tlinearGradient(:id='`gradient-${id}`' :x1=\"l\" :y1=\"t\" :x2=\"l + aw\" :y2=\"t\" gradientUnits=\"userSpaceOnUse\")\n\t\t\t\tstop(stop-color=\"#EED667\" stop-opacity=\"0\")\n\t\t\t\tstop(offset=\"0.128101\" stop-color=\"#EED667\" stop-opacity=\"0.19\")\n\t\t\t\tstop(offset=\"0.8698\" stop-color=\"#EED667\" stop-opacity=\"0.19\")\n\t\t\t\tstop(offset=\"1\" stop-color=\"#EED667\" stop-opacity=\"0\")\n</template>\n\n<script>\nimport formatNumber from '@/lib/utils/formatNumber';\nimport { format } from 'date-fns';\nimport colors from '@/assets/js/colors';\nimport BaseChart from './BaseChart';\n\nexport default {\n\tname : 'line-chart',\n\n\textends : BaseChart,\n\n\tprops : {\n\t\tchart : {\n\t\t\ttype : Object,\n\t\t},\n\t},\n\n\tdata : () => ( {\n\t\t// nothing yet\n\t} ),\n\n\tcomputed : {\n\t\ttotal() {\n\t\t\tconst { data } = this.chart;\n\t\t\tconst total    = data.reduce( ( sum, item ) => sum + item.value, 0 );\n\n\t\t\tconsole.log( total );\n\n\t\t\treturn formatNumber( total );\n\t\t},\n\t\tlastUpdated() {\n\t\t\tconst { updatedAt } = this.chart;\n\n\t\t\treturn format( new Date( updatedAt ), 'LLLL do, yyyy' );\n\t\t}\n\t},\n\n\tmounted() {\n\t\tthis.init( this.$refs.svg );\n\t},\n\n\tmethods : {\n\n\t\tdraw() {\n\n\t\t\t// get data range\n\t\t\tconst yValues = this.chart.data.map( datum => datum.value );\n\t\t\tconst range   = this.getDataRange( yValues );\n\n\t\t\tconsole.log( range );\n\t\t\t// draw y-axis labels\n\t\t\tthis.drawAxisIndicators( {\n\t\t\t\taxis           : 'y-right',\n\t\t\t\ttransformLabel : text => formatNumber( text ),\n\t\t\t\tlines          : {\n\t\t\t\t\tnumberOfIndicators         : 5,\n\t\t\t\t\tspaceBetweenLabelsAndLines : 10,\n\t\t\t\t},\n\t\t\t\tcolor : colors.colorPrimary,\n\t\t\t\trange,\n\t\t\t} );\n\n\t\t\t// draw x-axis labels\n\t\t\tconst xAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis                       : 'x-bottom',\n\t\t\t\tvalues                     : this.chart.data,\n\t\t\t\tspaceBetweenLabelsAndChart : 10,\n\t\t\t\tlabelStyle                 : [\n\t\t\t\t\t['font-size', '14px'],\n\t\t\t\t\t['font-weight', '700'],\n\t\t\t\t\t['font-family', '\"Manjari\", sans-serif'],\n\t\t\t\t],\n\t\t\t} );\n\n\t\t\t// draw line and shaded\n\t\t\t// area under chart\n\t\t\tthis.drawShadedLine( xAxisData, range );\n\t\t\tconsole.log( xAxisData );\n\t\t\t// draw points\n\t\t\tthis.drawPoints( xAxisData, range );\n\t\t},\n\n\t\tdrawShadedLine( xAxisData, range ) {\n\t\t\tif ( xAxisData.length < 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [pointOne, pointTwo] = xAxisData\n\t\t\t\t.slice( 0, 2 )\n\t\t\t\t.map( point => ( {\n\t\t\t\t\tx : point.x,\n\t\t\t\t\ty : () => this.getYValue( point.value, range ),\n\t\t\t\t} ) );\n\n\t\t\tconst fOfFirstLine = this.getLinearFunctionFromTwoPoints( pointOne, pointTwo );\n\n\t\t\tconst [secondLastPoint, lastPoint] = xAxisData\n\t\t\t\t.slice( xAxisData.length - 2, xAxisData.length )\n\t\t\t\t.map( point => ( {\n\t\t\t\t\tx : point.x,\n\t\t\t\t\ty : () => this.getYValue( point.value, range ),\n\t\t\t\t} ) );\n\n\t\t\tconst fOfSecondLine = this.getLinearFunctionFromTwoPoints( secondLastPoint, lastPoint );\n\n\t\t\tconst linePoints = xAxisData.map( ( datum, i ) => ( {\n\t\t\t\ty : ( () => {\n\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\treturn fOfFirstLine( this.l );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( i === xAxisData.length - 1 ) {\n\t\t\t\t\t\treturn fOfSecondLine( this.l + this.aw );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.getYValue( datum.value, range );\n\t\t\t\t} )(),\n\t\t\t\tx : ( () => {\n\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\treturn this.l;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( i === xAxisData.length - 1 ) {\n\t\t\t\t\t\treturn this.l + this.aw;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn datum.x();\n\t\t\t\t} )(),\n\t\t\t} ) );\n\n\t\t\tconst startPoint = {\n\t\t\t\tx : this.l,\n\t\t\t\ty : this.t + this.ah,\n\t\t\t};\n\n\t\t\tconst endPoint = {\n\t\t\t\tx : this.l + this.aw,\n\t\t\t\ty : this.t + this.ah,\n\t\t\t};\n\n\t\t\tconst points = [\n\t\t\t\tstartPoint,\n\t\t\t\t...linePoints,\n\t\t\t\tendPoint,\n\t\t\t];\n\n\t\t\tthis.canvas\n\t\t\t\t.append( 'path' )\n\t\t\t\t.attr( 'd', this.pathFromPoints( points ) )\n\t\t\t\t.style( 'fill', `url(#gradient-${this.id})` ); // look in mark up\n\t\t},\n\n\t\tdrawPoints( xAxisData, range ) {\n\t\t\tconst linePoints = xAxisData.map( datum => ( {\n\t\t\t\tx : datum.x(),\n\t\t\t\ty : this.getYValue( datum.value, range ),\n\t\t\t} ) );\n\n\t\t\tthis.canvas\n\t\t\t\t.append( 'path' )\n\t\t\t\t.attr( 'd', this.pathFromPoints( linePoints, false ) )\n\t\t\t\t.style( 'stroke-width', '4px' )\n\t\t\t\t.style( 'stroke', colors.colorAccent )\n\t\t\t\t.style( 'fill', 'transparent' );\n\n\t\t\tthis.canvas\n\t\t\t\t.selectAll( '.points' )\n\t\t\t\t.data( xAxisData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'circle' )\n\t\t\t\t.attr( 'cx', d => d.x() )\n\t\t\t\t.attr( 'cy', d => this.getYValue( d.value, range ) )\n\t\t\t\t.attr( 'r', '5' )\n\t\t\t\t.style( 'stroke-width', '4px' )\n\t\t\t\t.style( 'stroke', d => d.color )\n\t\t\t\t.style( 'fill', colors.bgColor );\n\t\t}\n\n\t}\n};\n</script>\n\n<style lang='scss'>\n.line-chart {\n\tdisplay: flex;\n\talign-items: stretch;\n\twidth: 100%;\n\n\taside {\n\t\t// display: flex;\n\t\t// flex-direction: column;\n\t\tjustify-content: space-between;\n\t\t// flex: 1 1 0;\n\n\t\tlegend {\n\t\t\ttext-align: left;\n\n\t\t\th1,\n\t\t\th2 {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\ttext-align: left;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tfont-weight: 700;\n\t\t\t\tcolor: $color-accent;\n\t\t\t}\n\n\t\t\th2 {\n\t\t\t\tfont-family: \"Manjari\", sans-serif;\n\t\t\t\tfont-size: 18px;\n\t\t\t\tfont-weight: 400;\n\t\t\t}\n\t\t}\n\n\t\tfooter p {\n\t\t\tfont-family: 'Manjari', sans-serif;\n\t\t\ttext-align: left;\n\t\t\tfont-size: 12px;\n\n\t\t\tspan {\n\t\t\t\tdisplay: inline-block;\n\t\t\t}\n\t\t}\n\t}\n\n\tsvg {\n\t\tflex: 2 2 0;\n\t}\n}\n</style>\n"]}]}
{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/BaseChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/BaseChart.vue","mtime":1617815467467},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BaseChart.vue"],"names":[],"mappingsfile":"BaseChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<script>\nimport { v4 as uuid } from 'uuid';\nimport * as d3 from 'd3';\n\nexport default {\n\tprops : {\n\t\tdata : {\n\t\t\ttype : [Array, Object],\n\t\t},\n\t\tlegend : {\n\t\t\ttype : Object,\n\t\t},\n\t},\n\n\tdata : () => ( {\n\t\tcanvas : null,\n\t\tid     : uuid(),\n\t\th      : 0, // height\n\t\tw      : 0, // width\n\t\tl      : 0, // left offset\n\t\tr      : 0, // right offset\n\t\tt      : 0, // top offset\n\t\tb      : 0, // bottom offset\n\t} ),\n\n\tcomputed : {\n\t\torderedLegend() {\n\t\t\tconst legend = Object.keys( this.legend ).map( ( key ) => {\n\t\t\t\tconst value = this.legend[key];\n\t\t\t\treturn {\n\t\t\t\t\tkey,\n\t\t\t\t\t...value\n\t\t\t\t};\n\t\t\t} );\n\n\t\t\treturn legend.filter( a => a.order !== undefined ).sort( ( a, b ) => a.order - b.order );\n\t\t},\n\n\t\tah() { // available height\n\t\t\tconst { h, t, b } = this;\n\n\t\t\treturn h - ( t + b );\n\t\t},\n\n\t\taw() { // available width\n\t\t\tconst { w, r, l } = this;\n\n\t\t\treturn w - ( r + l );\n\t\t},\n\n\t},\n\n\tbeforeDelete() {\n\t\twindow.removeEventListener( 'resize', this.reset );\n\t},\n\n\tmethods : {\n\t\tinit( svgEl ) {\n\t\t\tthis.resetDims();\n\n\t\t\tthis.canvas = d3.select( svgEl );\n\t\t\tthis.draw();\n\n\t\t\twindow.addEventListener( 'resize', this.reset, { passive : true } );\n\t\t},\n\n\t\treset() {\n\t\t\tthis.canvas\n\t\t\t\t.selectAll( '*' )\n\t\t\t\t.remove();\n\n\t\t\tthis.resetDims();\n\t\t\tthis.draw();\n\t\t},\n\n\t\tresetDims() {\n\n\t\t\tconst {\n\t\t\t\tclientWidth  : w,\n\t\t\t\tclientHeight : h,\n\t\t\t} = this.$refs.svg;\n\n\t\t\tthis.h = h;\n\t\t\tthis.w = w;\n\t\t\tthis.t = 0;\n\t\t\tthis.b = 0;\n\t\t\tthis.l = 0;\n\t\t\tthis.r = 0;\n\t\t},\n\n\t\tupdateDims( props ) {\n\t\t\tconst keys = Object.keys( props );\n\t\t\tconst allowed = {\n\t\t\t\tt : true,\n\t\t\t\tb : true,\n\t\t\t\tl : true,\n\t\t\t\tr : true,\n\t\t\t\th : true,\n\t\t\t\tw : true,\n\t\t\t};\n\n\t\t\tkeys.forEach( ( key ) => {\n\t\t\t\tif ( !allowed[key] ) {\n\t\t\t\t\tconsole.warning( `Key ${key} cannot be updated using updateDims()` );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis[key] = props[key];\n\t\t\t} );\n\t\t},\n\n\t\trealignAxisLabels() {\n\t\t\tthis.canvas.selectAll( '.axis-labels' )\n\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t.attr( 'y', d => d.y() );\n\n\t\t\tthis.canvas.selectAll( '.axis-indicators' )\n\t\t\t\t.attr( 'd', d => d.path() );\n\t\t},\n\n\t\tdrawAxisIndicators( options ) {\n\t\t\tconst yAxis = /y(-(left|right))?/;\n\t\t\tconst xAxis = /x(-(top|bottom))?/;\n\n\t\t\tif ( yAxis.test( options.axis ) ) {\n\t\t\t\treturn this.drawYAxisIndicators( options );\n\t\t\t}\n\n\t\t\tif ( xAxis.test( options.axis ) ) {\n\t\t\t\treturn this.drawXAxisIndicators( options );\n\t\t\t}\n\n\t\t\tthrow new Error( `\"${options.axis}\" is not a valid axis. Expected one of\\n[\\n  'y',\\n  'y-left',\\n  'y-right',\\n  'x',\\n  'x-bottom',\\n  'x-top',\\n]` );\n\t\t},\n\n\t\tdrawYAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\trange,\n\t\t\t\tlines,\n\t\t\t\tpostChar,\n\t\t\t\tcolor,\n\t\t\t\ttransformLabel,\n\t\t\t} = options;\n\n\t\t\tconst {\n\t\t\t\tnumberOfIndicators,\n\t\t\t\tspaceBetweenLabelsAndLines,\n\t\t\t} = lines;\n\n\t\t\t/* draw initial lines and indicators */\n\t\t\tconst rangeDifference = range.end - range.start;\n\n\t\t\t/* add text labels */\n\n\t\t\tconst labelData = [];\n\t\t\tfor ( let i = 0; i < numberOfIndicators; i++ ) {\n\n\t\t\t\tconst dominantBaseline = ( () => {\n\t\t\t\t\tif ( i === numberOfIndicators - 1 ) {\n\t\t\t\t\t\treturn 'text-before-edge';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\treturn 'text-after-edge';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'middle';\n\t\t\t\t} )();\n\n\t\t\t\tconst y = ( () => {\n\t\t\t\t\tconst bottomOfChart      = this.t + this.ah;\n\t\t\t\t\tconst distanceFromBottom = i * ( this.ah / ( numberOfIndicators - 1 ) );\n\n\t\t\t\t\treturn bottomOfChart - distanceFromBottom;\n\t\t\t\t} );\n\n\t\t\t\tconst x     = () => ( ( axis === 'y-right' ) ? this.w - this.r : this.l );\n\t\t\t\tconst x2    = () => ( ( axis === 'y-right' ) ? x() - this.aw : x() + this.aw );\n\t\t\t\tconst pathX = () => ( ( axis === 'y-right' ) ? x() - spaceBetweenLabelsAndLines : x() + spaceBetweenLabelsAndLines );\n\n\t\t\t\tconst textValue = Math.round( range.start + ( ( i / ( numberOfIndicators - 1 ) ) * rangeDifference ) );\n\t\t\t\tconst label     = transformLabel ? transformLabel( textValue ) : textValue;\n\n\t\t\t\tconst textAnchor = ( axis === 'y-right' ? 'start' : 'end' );\n\n\t\t\t\tlabelData.push( {\n\t\t\t\t\tx,\n\t\t\t\t\tx2,\n\t\t\t\t\ty,\n\t\t\t\t\ty2   : y,\n\t\t\t\t\ttext : `${label}${postChar || ''}`,\n\t\t\t\t\tpath : () => `M ${pathX()}, ${y()} L ${x2()}, ${y()}`,\n\t\t\t\t\tdominantBaseline,\n\t\t\t\t\ttextAnchor,\n\t\t\t\t\tcolor,\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst lineIndicatorGroups = this.canvas\n\t\t\t\t.selectAll( `line-indicators-${this.id}` )\n\t\t\t\t.data( labelData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'g' ) // will append as many g's as the length of labelData\n\t\t\t\t.attr( 'class', `line-indicators-${this.id}` );\n\n\t\t\tif ( options.labels !== false ) {\n\n\t\t\t\t/* draw line lables */\n\t\t\t\tconst lineLabels = lineIndicatorGroups.append( 'text' )\n\t\t\t\t\t.attr( 'class', `line-indicators label-${this.id} axis-labels dynamic-text-${this.id}` )\n\t\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t\t.style( 'font-size', '10px' )\n\t\t\t\t\t.style( 'fill', color )\n\t\t\t\t\t.text( d => d.text )\n\t\t\t\t\t.attr( 'text-anchor', d => d.textAnchor );\n\n\t\t\t\t/* right align text */\n\n\t\t\t\tconst lineLabelWidths  = Array.from( lineLabels._groups[0] ).map( a => a.getBBox().width );\n\t\t\t\tconst biggestLineLabel = Math.max( ...lineLabelWidths );\n\n\t\t\t\tconst dims = ( () => {\n\t\t\t\t\tconst newWidth = ( biggestLineLabel + spaceBetweenLabelsAndLines );\n\n\t\t\t\t\tif ( axis === 'y-right' ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tr : newWidth,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tl : newWidth,\n\t\t\t\t\t};\n\t\t\t\t} )();\n\n\t\t\t\tthis.updateDims( dims );\n\t\t\t\tthis.realignAxisLabels();\n\n\t\t\t}\n\n\t\t\t/* draw lines */\n\t\t\tlineIndicatorGroups.append( 'path' )\n\t\t\t\t.attr( 'd', d => d.path() )\n\t\t\t\t.attr( 'class', `dynamic-stroke-${this.id} axis-indicators` )\n\t\t\t\t.style( 'stroke-dasharray', '2, 4' )\n\t\t\t\t.style( 'stroke', color );\n\n\t\t\treturn lineIndicatorGroups;\n\n\t\t},\n\n\t\tdrawXAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\tvalues,\n\t\t\t\tspaceBetweenLabelsAndChart,\n\t\t\t\tlabelStyle,\n\t\t\t} = options;\n\t\t\tconsole.log( values );\n\t\t\tconst getX = ( i ) => {\n\t\t\t\tconst { aw, l } = this;\n\t\t\t\tconst ret = l + ( ( aw / ( values.length + 1 ) ) * ( i + 1 ) );\n\t\t\t\tconsole.log( ret );\n\t\t\t\treturn ret;\n\t\t\t};\n\n\t\t\tconst xAxisData = values.map( ( datum, i ) => {\n\t\t\t\tconst y = () => ( ( axis === 'x-top' ) ? this.t : this.t + this.ah );\n\t\t\t\tconst x = () => getX( i );\n\n\t\t\t\treturn {\n\t\t\t\t\t...datum,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\ttextAnchor       : 'middle',\n\t\t\t\t\tdominantBaseline : ( axis === 'x-top' ) ? 'text-before-edge' : 'text-after-edge',\n\t\t\t\t};\n\t\t\t} );\n\n\t\t\tconst xAxisLabels = this.canvas\n\t\t\t\t.selectAll( 'x-axis-labels axis-label' )\n\t\t\t\t.data( xAxisData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'text-anchor', d => d.textAnchor )\n\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t.style( 'fill', d => d.color )\n\t\t\t\t.text( d => d.label );\n\n\t\t\tif ( labelStyle ) {\n\t\t\t\tthis.applyMethods( xAxisLabels, 'style', labelStyle );\n\t\t\t}\n\n\t\t\tconst xAxisLabelDims    = Array.from( xAxisLabels._groups[0] ).map( a => a.getBBox() );\n\t\t\tconst xAxisLabelHeights = xAxisLabelDims.map( a => a.height );\n\t\t\t// const xAxisLabelWidths  = xAxisLabelDims.map( a => a.width );\n\t\t\tconst biggestXAxisLabel = Math.max( ...xAxisLabelHeights );\n\n\t\t\tconst dims = ( () => {\n\t\t\t\tif ( axis === 'y-top' ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tt : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tb : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t};\n\t\t\t} )();\n\n\t\t\tthis.updateDims( dims );\n\t\t\tthis.realignAxisLabels();\n\t\t\treturn xAxisData;\n\n\t\t},\n\n\t\tapplyMethods( nodes, method, options = [] ) {\n\t\t\toptions.reduce( ( d3item, option ) => {\n\t\t\t\tconst [prop, value] = option;\n\n\t\t\t\treturn d3item[method]( prop, ( d ) => {\n\t\t\t\t\tif ( typeof value === 'function' ) {\n\t\t\t\t\t\treturn value( d );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t} );\n\t\t\t}, nodes );\n\t\t},\n\n\t\tgetDataRange( yValues, scaled ) {\n\t\t\tconst biggest    = Math.max( ...yValues );\n\t\t\tconst smallest   = Math.min( ...yValues );\n\t\t\tconst difference = ( biggest - smallest );\n\t\t\tif ( difference === 0 ) {\n\n\t\t\t\tlet power = 0;\n\n\t\t\t\twhile ( biggest / ( 10 ** power ) > 10 ) {\n\t\t\t\t\tpower += 1;\n\t\t\t\t}\n\n\t\t\t\tconst increment = 10 ** power;\n\n\t\t\t\treturn {\n\t\t\t\t\tstart : scaled ? Math.floor( biggest / increment ) * increment : 0,\n\t\t\t\t\tend   : Math.ceil( biggest / increment ) * increment,\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// factor of ten to multiply\n\t\t\t// for the label's scale\n\t\t\tconst scale = ( () => {\n\n\t\t\t\tlet power = 0;\n\n\t\t\t\twhile ( difference / ( 10 ** power ) > 10 ) {\n\t\t\t\t\tpower += 1;\n\t\t\t\t}\n\n\t\t\t\treturn power;\n\n\t\t\t} )();\n\t\t\tconst relevantIncrement =  10 ** scale;\n\n\t\t\t// we'll start by trying to do a\n\t\t\t// scale from the closest instance of\n\t\t\t// our relevant increment to a point\n\t\t\t// four more relevantIncrements away\n\t\t\tconst start = !scaled ? 0 : ( Math.floor( smallest / relevantIncrement ) * relevantIncrement );\n\t\t\tconst range = ( Math.ceil( ( difference + smallest - start ) / relevantIncrement ) ) * relevantIncrement;\n\t\t\tconst end   = start + range;\n\n\t\t\treturn {\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t};\n\t\t},\n\n\t\tgetYValue( value, range ) {\n\t\t\tconst { t, ah } = this;\n\t\t\tconst { end, start } = range;\n\n\t\t\tconst fraction = ( value - start ) / ( end - start );\n\n\t\t\treturn t + ( ah - ( fraction * ah ) );\n\t\t},\n\n\t\tgetLinearFunctionFromTwoPoints( pointOne, pointTwo ) {\n\t\t\treturn ( x ) => {\n\t\t\t\t// rise over run. important\n\t\t\t\tconst slope = ( pointOne.y() - pointTwo.y() ) / ( pointOne.x() - pointTwo.x() );\n\n\t\t\t\t// b = y - m(x);\n\t\t\t\tconst b = pointOne.y() - ( slope * pointOne.x() );\n\n\t\t\t\t// y = m(x) + b;\n\t\t\t\treturn ( slope * x ) + b;\n\t\t\t};\n\t\t},\n\n\t\twrapText( text, width ) {\n\n\t\t\tconst nodes = Array.from( text._groups[0] );\n\n\t\t\tnodes.forEach( ( node ) => {\n\t\t\t\tconst textNode   = d3.select( node );\n\t\t\t\tconst totalWords = textNode\n\t\t\t\t\t.text()\n\t\t\t\t\t.split( /\\s+/ )\n\t\t\t\t\t.reverse();\n\n\t\t\t\tconst lineHeight = 1.1; // ems\n\t\t\t\tconst y          = textNode.attr( 'y' );\n\t\t\t\tconst x          = textNode.attr( 'x' );\n\t\t\t\tconst dy         = parseFloat( textNode.attr( 'dy' ) ) || 0;\n\n\t\t\t\tlet tspan = textNode\n\t\t\t\t\t.text( null )\n\t\t\t\t\t.append( 'tspan' )\n\t\t\t\t\t.attr( 'x', x )\n\t\t\t\t\t.attr( 'y', y )\n\t\t\t\t\t.attr( 'dy', `${dy}em` );\n\n\t\t\t\tlet line       = [];\n\t\t\t\tlet lineNumber = 0;\n\t\t\t\twhile ( totalWords.length ) {\n\t\t\t\t\tconst word = totalWords.pop();\n\n\t\t\t\t\t// add this word to the line\n\t\t\t\t\tline.push( word );\n\n\t\t\t\t\t// set the tspan's content to\n\t\t\t\t\t// the value of our line\n\t\t\t\t\ttspan.text( line.join( ' ' ) );\n\n\t\t\t\t\t// determine if the line is now\n\t\t\t\t\t// overflowing\n\t\t\t\t\tconst textLength = tspan\n\t\t\t\t\t\t.node()\n\t\t\t\t\t\t.getComputedTextLength();\n\n\t\t\t\t\tconst overflowing = textLength > width;\n\n\t\t\t\t\tif ( overflowing ) {\n\t\t\t\t\t\t// remove that word, as it was\n\t\t\t\t\t\t// too long\n\t\t\t\t\t\tline.pop();\n\n\t\t\t\t\t\t// reset the text to the line without\n\t\t\t\t\t\t// the word that overflowed\n\t\t\t\t\t\ttspan.text( line.join( ' ' ) );\n\n\t\t\t\t\t\t// put this word in the next line\n\t\t\t\t\t\tline = [word];\n\n\t\t\t\t\t\t// add a new tsapn\n\t\t\t\t\t\ttspan = textNode\n\t\t\t\t\t\t\t.append( 'tspan' )\n\t\t\t\t\t\t\t.attr( 'x', x )\n\t\t\t\t\t\t\t.attr( 'y', y )\n\t\t\t\t\t\t\t.attr( 'dy', `${( ++lineNumber * lineHeight ) + dy}em` )\n\t\t\t\t\t\t\t.text( word );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextNode.selectAll( 'tspan' )\n\t\t\t\t\t.attr( 'dy', ( d, i, tspans ) => {\n\n\t\t\t\t\t\tconst numberOfLines = Array.from( tspans )\n\t\t\t\t\t\t\t.filter( a => a.innerHTML !== '' )\n\t\t\t\t\t\t\t.length - 1;\n\n\t\t\t\t\t\tconst tspanNode  = tspans[i];\n\t\t\t\t\t\tconst startingDy = parseFloat( d3.select( tspanNode ).attr( 'dy' ), 10 );\n\n\t\t\t\t\t\tconst halfTotalTextHeight = ( ( numberOfLines / 2 ) * lineHeight );\n\t\t\t\t\t\tconst linePosition        = ( lineHeight * lineNumber );\n\n\t\t\t\t\t\t// centers the wrapper text\n\t\t\t\t\t\treturn `${( startingDy || 0 ) - linePosition + halfTotalTextHeight}em`;\n\n\t\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\n\t\tpathFromPoints( points, closed = true ) {\n\n\t\t\tconst endCharacter = closed ? ' Z' : '';\n\t\t\tconst path         = points.reduce( ( a, b, i ) => {\n\n\t\t\t\tif ( typeof a !== 'object' ) {\n\t\t\t\t\treturn `${a} L ${b.x} ${b.y}${i === ( points.length - 1 ) ? endCharacter : ''}`;\n\t\t\t\t}\n\n\t\t\t\treturn `M ${b.x} ${b.y}`;\n\n\t\t\t}, {} );\n\n\t\t\treturn path;\n\n\t\t},\n\t},\n};\n</script>\n"]}]}
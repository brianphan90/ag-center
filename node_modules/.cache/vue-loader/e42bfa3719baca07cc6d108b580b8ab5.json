{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/fBarChart.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/fBarChart.vue","mtime":1617753056381},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZGltQ2hhcnR7CgloZWlnaHQ6IDEwMCU7Cgl3aWR0aDogMTAwJTsKCXN2ZyB7CgkvLyBmbGV4OiAyIDIgMAoJaGVpZ2h0OiAxMDAlOwoJd2lkdGg6IDEwMCU7Cgl9Cn0KLy8gLmNoYXJ0ewovLyAJZGlzcGxheTogZmxleDsKLy8gCWFsaWduLWl0ZW1zOiBzdHJldGNoOwovLyAJd2lkdGg6IDEwMCU7Ci8vIAloZWlnaHQ6IDIwMHB4OwovLyAJcGFkZGluZzowOwovLyAJc3ZnIHsKLy8gCS8vIGZsZXg6IDIgMiAwCi8vIAlwb3NpdGlvbjogcmVsYXRpdmU7Ci8vIAloZWlnaHQ6IDEwMCU7Ci8vIAl3aWR0aDogMTAwJTsKLy8gCWJvcmRlcjogMHB4OzsKLy8gCX0KLy8gfQo="},{"version":3,"sources":["fBarChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fBarChart.vue","sourceRoot":"src/components/charts","sourcesContent":["<template lang=\"pug\">\n\t.dimChart\n\t\tsvg(ref='svg')\n</template>\n\n<script>\nimport formatNumber from '@/lib/utils/formatNumber';\nimport colors from '@/assets/js/colors';\nimport * as d3 from 'd3';\nimport BaseChart from './BaseChart';\nimport ChartLegend from '../ChartLegend';\n\nexport default {\n\tname    : 'sbar-chart',\n\textends : BaseChart,\n\tprops   : {\n\t\tchart : {\n\t\t\ttype : Object,\n\t\t},\n\t\toptions : {\n\t\t\ttype    : Object,\n\t\t\tdefault : () => ( {\n\t\t\t\thasBarLabels : true\n\t\t\t} )\n\t\t}\n\n\t},\n\tdata : () => ( {\n\t\tbarLabelHeight  : 30,\n\t\tbarLabelSpacing : 5\n\t} ),\n\tcomponents : {\n\t\tChartLegend\n\t},\n\tcomputed : {\n\t\tbarWidth() {\n\t\t\tconst { aw } = this;\n\t\t\treturn Math.min( aw / this.chart.data.length, 50 );\n\t\t},\n\t\tbarSpacing() {\n\t\t\tconst { barWidth, data, aw } = this;\n\t\t\tconsole.log( barWidth );\n\t\t\treturn ( aw - ( barWidth * this.chart.data.length ) ) / this.chart.data.length;\n\t\t},\n\t\tlabelTextSize() {\n\t\t\treturn this.barWidth * 0.55;\n\t\t}\n\t},\n\tmounted() {\n\t\tthis.init( this.$refs.svg );\n\t},\n\tmethods : {\n\t\tdraw() {\n\t\t\tthis.updateDims( {\n\t\t\t\tl : 5,\n\t\t\t\tr : 5,\n\t\t\t\tt : 30\n\t\t\t} );\n\t\t\tconst { values } = this.chart.data.map( entry => entry.label );\n\t\t\tconst yValues = this.chart.data.map( entry => entry.value );\n\t\t\t// const sum = Object.keys( values ).reduce( ( total, key ) => total + values[key], 0 );\n\t\t\tconst sum = this.getDataRange( yValues, false ).end;\n\t\t\t// const yValues = this.chart.data[0].map( datum => datum.value );\n\t\t\tconst range   = { start : 0, end : sum };\n\t\t\tif ( this.hasBarLabels ) {\n\t\t\t\tthis.updateDims( {\n\t\t\t\t\tt : this.t + this.barLabelHeight + this.barLabelSpacing\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// draw y-axis labels\n\t\t\tconst yAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis           : 'y-right',\n\t\t\t\ttransformLabel : text => formatNumber( text ),\n\t\t\t\tlines          : {\n\t\t\t\t\tnumberOfIndicators         : 6,\n\t\t\t\t\tspaceBetweenLabelsAndLines : 10,\n\t\t\t\t},\n\t\t\t\tcolor : colors.colorPrimary,\n\t\t\t\trange,\n\t\t\t} );\n\t\t\t// console.log( yAxisData );\n\t\t\t// draw x-axis labels\n\t\t\tconst xAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis                       : 'x-bottom',\n\t\t\t\tvalues                     : this.chart.data,\n\t\t\t\tspaceBetweenLabelsAndChart : 10,\n\t\t\t\tlabelStyle                 : [\n\t\t\t\t\t['font-size', '14px'],\n\t\t\t\t\t['font-weight', '700'],\n\t\t\t\t\t['font-family', '\"Manjari\", sans-serif'],\n\t\t\t\t],\n\t\t\t} );\n\t\t\t// Compute the position and size of the bars\n\t\t\tconst barData   = this.newComputeBarData( );\n\t\t\tconst barGroups = this.newDrawBars( barData );\n\t\t\tif ( this.options.hasBarLabels ) {\n\t\t\t\tconsole.log( 'here' );\n\t\t\t\tthis.drawBarLabels( barGroups );\n\t\t\t}\n\t\t\tconsole.log( barGroups );\n\t\t},\n\t\tnewComputeBarData( ) {\n\t\t\tconst values = this.chart.data.map( entry => entry.value );\n\t\t\tconst { end } = this.getDataRange( values, false );\n\t\t\tconst sum = this.chart.data.reduce( ( total, entry ) => total + entry.value, 0 );\n\t\t\treturn this.chart.data.map( ( entry, i ) => {\n\t\t\t\tconst { value } = entry;\n\t\t\t\tconst height = ( value / end ) * this.ah;\n\t\t\t\tconst y = this.t + ( this.ah - height );\n\t\t\t\treturn {\n\t\t\t\t\twidth      : this.barWidth,\n\t\t\t\t\tbarColor   : entry.barColor,\n\t\t\t\t\tlabelColor : entry.labelColor,\n\t\t\t\t\tx          : this.getX( i ),\n\t\t\t\t\t// x     : this.l + xDims[i].x,\n\t\t\t\t\tlabel      : entry.label,\n\t\t\t\t\tvalue      : entry.value,\n\t\t\t\t\ty,\n\t\t\t\t\theight\n\t\t\t\t};\n\t\t\t} );\n\t\t},\n\t\tnewDrawXaxis( barGroups ) {\n\t\t\tconst xAxisLabels = barGroups\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'class', 'x-axis-labels' )\n\t\t\t\t.attr( 'x', ( d, i ) => this.getTextX( i ) )\n\t\t\t\t.attr( 'y', this.t + this.ah )\n\t\t\t\t.attr( 'text-anchor', 'middle' )\n\t\t\t\t.attr( 'dominant-baseline', 'start' )\n\t\t\t\t.style( 'font-size', '12px' )\n\t\t\t\t.text( d => d.label );\n\n\t\t\tthis.changeWithMode( {\n\t\t\t\tnodes   : xAxisLabels,\n\t\t\t\toptions : {\n\t\t\t\t\tday : {\n\t\t\t\t\t\tstyle : [\n\t\t\t\t\t\t\t['fill', colors.grey],\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\tnight : {\n\t\t\t\t\t\tstyle : [\n\t\t\t\t\t\t\t['fill', colors.white],\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} );\n\t\t\tconst barLabelNodes = barGroups.selectAll( '.x-axis-labels' );\n\t\t\tconst barLabelWidths = Array.from( barLabelNodes._groups[0] ).map( a => a.getBBox().height );\n\t\t\tconst biggestBarLabel = Math.max( ...barLabelWidths );\n\t\t\tconst spaceBetweenBarAndXAxis = 2;\n\t\t\tthis.updateDims( {\n\t\t\t\tb : biggestBarLabel + spaceBetweenBarAndXAxis\n\t\t\t} );\n\t\t\treturn xAxisLabels;\n\t\t},\n\t\tnewDrawBars( barData ) {\n\t\t\tconst barGroups = this.canvas.selectAll( `bars-${this.id}` )\n\t\t\t\t.data( barData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'g' );\n\t\t\tbarGroups\n\t\t\t\t.append( 'rect' )\n\t\t\t\t.attr( 'x', d => d.x )\n\t\t\t\t.attr( 'y', d => d.y )\n\t\t\t\t// .attr( 'fill', d => d.color )\n\t\t\t\t.attr( 'fill', d => d.barColor )\n\t\t\t\t.attr( 'height', d => d.height )\n\t\t\t\t.attr( 'width', d => d.width )\n\t\t\t\t.attr( 'stroke', d => d.barColor )\n\t\t\t\t.attr( 'opacity', 0.8 )\n\t\t\t\t.attr( 'stroke-width', d => '2' )\n\t\t\t\t.attr( 'class', `bar-${this.id} translate-${this.id}` );\n\n\t\t\t// For striped bar functionality\n\t\t\t// const roundToNearestMultipleOfEight = num => Math.ceil( Math.ceil( num ) / 8 ) * 8;\n\t\t\t// barGroups\n\t\t\t// \t.append( 'path' )\n\t\t\t// \t.attr( 'd', ( d, i ) => {\n\t\t\t// \t\tconst x = this.getX( i ) + ( this.barWidth / 2 );\n\t\t\t// \t\tconst point1 = {\n\t\t\t// \t\t\tx,\n\t\t\t// \t\t\ty : Math.round( this.h - this.b ),\n\t\t\t// \t\t};\n\t\t\t// \t\tconst point2 = {\n\t\t\t// \t\t\tx,\n\t\t\t// \t\t\ty : Math.min( point1.y, roundToNearestMultipleOfEight( point1.y - this.getHeight( d.value ) ) ),\n\t\t\t// \t\t};\n\t\t\t// \t\treturn this.pathFromPoints( [point1, point2] );\n\t\t\t// \t} )\n\t\t\t// \t.style( 'stroke', d => '#F8A79E' )\n\t\t\t// \t.style( 'stroke-dasharray', d => '2, 6' )\n\t\t\t// \t.style( 'stroke-width', d => this.barWidth );\n\t\t\tconsole.log( barGroups );\n\t\t\treturn barGroups;\n\t\t},\n\t\tdrawBarLabels( barGroups ) {\n\t\t\tconst barLabelGroups = barGroups\n\t\t\t\t.append( 'g' );\n\t\t\tconst textLabels = barLabelGroups.append( 'text' )\n\t\t\t\t.attr( 'x', ( d, i ) => this.getTextX( i ) )\n\t\t\t\t.attr( 'y', ( d ) => {\n\t\t\t\t\tconst height = this.getHeight( d.value );\n\t\t\t\t\tconst y = this.getY( height );\n\t\t\t\t\treturn y - ( ( this.barLabelHeight / 2 ) + this.barLabelSpacing );\n\t\t\t\t} )\n\t\t\t\t.attr( 'class', 'bar-value' )\n\t\t\t\t.attr( 'text-anchor', 'middle' )\n\t\t\t\t.attr( 'dominant-baseline', 'middle' )\n\t\t\t\t.style( 'fill', d => d.labelColor )\n\t\t\t\t.style( 'font-weight', 'bold' )\n\t\t\t\t.style( 'font-family', 'Bitter' )\n\t\t\t\t.style( 'font-size', `${this.labelTextSize}px` )\n\t\t\t\t.text( d => formatNumber( d.value ) );\n\t\t\tconst textDims = Array.from(\n\t\t\t\ttextLabels._groups[0]\n\t\t\t).map(\n\t\t\t\ttext => d3.select( text )\n\t\t\t\t\t.node()\n\t\t\t\t\t.getBBox()\n\t\t\t);\n\t\t\tconst verticalPadding = 5;\n\t\t\tconsole.log( textDims );\n\t\t\tconst maxTextWidth  = Math.max( ...textDims.map( dims => dims.width ) );\n\t\t\tconst maxTextHeight = Math.max( ...textDims.map( dims => dims.height ) );\n\t\t\tconst rectangleWidth = maxTextWidth + ( 2 * verticalPadding );\n\t\t\tconst rectangleHeight  = maxTextHeight + ( 2 * verticalPadding );\n\t\t},\n\t\tdrawXAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\tvalues,\n\t\t\t\tspaceBetweenLabelsAndChart,\n\t\t\t\tlabelStyle,\n\t\t\t} = options;\n\t\t\tconst getX = ( i ) => {\n\t\t\t\tconst { aw, l } = this;\n\t\t\t\treturn l + ( ( aw / ( values.length + 1 ) ) * ( i + 1 ) );\n\t\t\t};\n\t\t\tconst xAxisData = values.map( ( datum, i ) => {\n\t\t\t\tconst y = () => ( ( axis === 'x-top' ) ? this.t : this.t + this.ah );\n\t\t\t\tconst x = () => getX( i );\n\t\t\t\treturn {\n\t\t\t\t\t...datum,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\ttextAnchor       : 'middle',\n\t\t\t\t\tdominantBaseline : ( axis === 'x-top' ) ? 'text-before-edge' : 'text-after-edge',\n\t\t\t\t};\n\t\t\t} );\n\t\t\tconst xAxisLabels = this.canvas\n\t\t\t\t.selectAll( 'x-axis-labels axis-label' )\n\t\t\t\t.data( xAxisData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'text-anchor', d => d.textAnchor )\n\t\t\t\t.attr( 'x', ( d, i ) => this.getTextX( i ) )\n\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t.style( 'fill', d => d.color )\n\t\t\t\t.text( d => d.label );\n\t\t\tif ( labelStyle ) {\n\t\t\t\tthis.applyMethods( xAxisLabels, 'style', labelStyle );\n\t\t\t}\n\t\t\tconst xAxisLabelDims    = Array.from( xAxisLabels._groups[0] ).map( a => a.getBBox() );\n\t\t\tconst xAxisLabelHeights = xAxisLabelDims.map( a => a.height );\n\t\t\t// const xAxisLabelWidths  = xAxisLabelDims.map( a => a.width );\n\t\t\tconst biggestXAxisLabel = Math.max( ...xAxisLabelHeights );\n\t\t\tconst dims = ( () => {\n\t\t\t\tif ( axis === 'y-top' ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tt : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tb : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t};\n\t\t\t} )();\n\t\t\tthis.updateDims( dims );\n\t\t\tthis.realignAxisLabels();\n\t\t\t// ? center texts as necessary\n\t\t\t// const totalTextSpace = xAxisLabelWidths.reduce( ( sum, w ) => sum + w, 0 );\n\t\t\t// const leftOverSpace  = this.aw - totalTextSpace;\n\t\t\t// const spaceAround    = ( leftOverSpace / ( values.length + 1 ) );\n\t\t\treturn xAxisLabelDims;\n\t\t},\n\t\tgetX( i ) {\n\t\t\tconst {\n\t\t\t\tl,\n\t\t\t\tbarWidth,\n\t\t\t\tbarSpacing,\n\t\t\t} = this;\n\t\t\tconst x = l + ( barWidth * i ) + ( barSpacing * i ) + ( barSpacing / 2 );\n\t\t\treturn x;\n\t\t},\n\t\tgetY( height ) {\n\t\t\tconst { ah, t } = this;\n\t\t\treturn ah + t - height;\n\t\t},\n\t\tgetTextX( i ) {\n\t\t\tconst {\n\t\t\t\tl,\n\t\t\t\tbarWidth,\n\t\t\t\tbarSpacing\n\t\t\t} = this;\n\t\t\treturn ( l + ( barWidth * i ) + ( barSpacing * i ) + ( barWidth / 2 ) ) + ( barSpacing / 2 );\n\t\t},\n\t\tgetHeight( value ) {\n\t\t\tconst values = this.chart.data.map( entry => entry.value );\n\t\t\tconst { end } = this.getDataRange( values, false );\n\t\t\t// + this assumes that the bottom of the range\n\t\t\t// + is always zero\n\t\t\treturn ( value / end ) * this.ah;\n\t\t}\n\t}\n};\n</script>\n\n<style lang='scss'>\n\t.dimChart{\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\tsvg {\n\t\t// flex: 2 2 0\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\t}\n\t}\n\t// .chart{\n\t// \tdisplay: flex;\n\t// \talign-items: stretch;\n\t// \twidth: 100%;\n\t// \theight: 200px;\n\t// \tpadding:0;\n\t// \tsvg {\n\t// \t// flex: 2 2 0\n\t// \tposition: relative;\n\t// \theight: 100%;\n\t// \twidth: 100%;\n\t// \tborder: 0px;;\n\t// \t}\n\t// }\n</style>\n"]}]}
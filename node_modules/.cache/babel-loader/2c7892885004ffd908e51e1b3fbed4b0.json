{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/babel-loader/lib/index.js!/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/BaseChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/BaseChart.vue","mtime":1617815467467},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BaseChart.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nimport { v4 as uuid } from 'uuid';\nimport * as d3 from 'd3';\n\nexport default {\n\tprops : {\n\t\tdata : {\n\t\t\ttype : [Array, Object],\n\t\t},\n\t\tlegend : {\n\t\t\ttype : Object,\n\t\t},\n\t},\n\n\tdata : () => ( {\n\t\tcanvas : null,\n\t\tid     : uuid(),\n\t\th      : 0, // height\n\t\tw      : 0, // width\n\t\tl      : 0, // left offset\n\t\tr      : 0, // right offset\n\t\tt      : 0, // top offset\n\t\tb      : 0, // bottom offset\n\t} ),\n\n\tcomputed : {\n\t\torderedLegend() {\n\t\t\tconst legend = Object.keys( this.legend ).map( ( key ) => {\n\t\t\t\tconst value = this.legend[key];\n\t\t\t\treturn {\n\t\t\t\t\tkey,\n\t\t\t\t\t...value\n\t\t\t\t};\n\t\t\t} );\n\n\t\t\treturn legend.filter( a => a.order !== undefined ).sort( ( a, b ) => a.order - b.order );\n\t\t},\n\n\t\tah() { // available height\n\t\t\tconst { h, t, b } = this;\n\n\t\t\treturn h - ( t + b );\n\t\t},\n\n\t\taw() { // available width\n\t\t\tconst { w, r, l } = this;\n\n\t\t\treturn w - ( r + l );\n\t\t},\n\n\t},\n\n\tbeforeDelete() {\n\t\twindow.removeEventListener( 'resize', this.reset );\n\t},\n\n\tmethods : {\n\t\tinit( svgEl ) {\n\t\t\tthis.resetDims();\n\n\t\t\tthis.canvas = d3.select( svgEl );\n\t\t\tthis.draw();\n\n\t\t\twindow.addEventListener( 'resize', this.reset, { passive : true } );\n\t\t},\n\n\t\treset() {\n\t\t\tthis.canvas\n\t\t\t\t.selectAll( '*' )\n\t\t\t\t.remove();\n\n\t\t\tthis.resetDims();\n\t\t\tthis.draw();\n\t\t},\n\n\t\tresetDims() {\n\n\t\t\tconst {\n\t\t\t\tclientWidth  : w,\n\t\t\t\tclientHeight : h,\n\t\t\t} = this.$refs.svg;\n\n\t\t\tthis.h = h;\n\t\t\tthis.w = w;\n\t\t\tthis.t = 0;\n\t\t\tthis.b = 0;\n\t\t\tthis.l = 0;\n\t\t\tthis.r = 0;\n\t\t},\n\n\t\tupdateDims( props ) {\n\t\t\tconst keys = Object.keys( props );\n\t\t\tconst allowed = {\n\t\t\t\tt : true,\n\t\t\t\tb : true,\n\t\t\t\tl : true,\n\t\t\t\tr : true,\n\t\t\t\th : true,\n\t\t\t\tw : true,\n\t\t\t};\n\n\t\t\tkeys.forEach( ( key ) => {\n\t\t\t\tif ( !allowed[key] ) {\n\t\t\t\t\tconsole.warning( `Key ${key} cannot be updated using updateDims()` );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis[key] = props[key];\n\t\t\t} );\n\t\t},\n\n\t\trealignAxisLabels() {\n\t\t\tthis.canvas.selectAll( '.axis-labels' )\n\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t.attr( 'y', d => d.y() );\n\n\t\t\tthis.canvas.selectAll( '.axis-indicators' )\n\t\t\t\t.attr( 'd', d => d.path() );\n\t\t},\n\n\t\tdrawAxisIndicators( options ) {\n\t\t\tconst yAxis = /y(-(left|right))?/;\n\t\t\tconst xAxis = /x(-(top|bottom))?/;\n\n\t\t\tif ( yAxis.test( options.axis ) ) {\n\t\t\t\treturn this.drawYAxisIndicators( options );\n\t\t\t}\n\n\t\t\tif ( xAxis.test( options.axis ) ) {\n\t\t\t\treturn this.drawXAxisIndicators( options );\n\t\t\t}\n\n\t\t\tthrow new Error( `\"${options.axis}\" is not a valid axis. Expected one of\\n[\\n  'y',\\n  'y-left',\\n  'y-right',\\n  'x',\\n  'x-bottom',\\n  'x-top',\\n]` );\n\t\t},\n\n\t\tdrawYAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\trange,\n\t\t\t\tlines,\n\t\t\t\tpostChar,\n\t\t\t\tcolor,\n\t\t\t\ttransformLabel,\n\t\t\t} = options;\n\n\t\t\tconst {\n\t\t\t\tnumberOfIndicators,\n\t\t\t\tspaceBetweenLabelsAndLines,\n\t\t\t} = lines;\n\n\t\t\t/* draw initial lines and indicators */\n\t\t\tconst rangeDifference = range.end - range.start;\n\n\t\t\t/* add text labels */\n\n\t\t\tconst labelData = [];\n\t\t\tfor ( let i = 0; i < numberOfIndicators; i++ ) {\n\n\t\t\t\tconst dominantBaseline = ( () => {\n\t\t\t\t\tif ( i === numberOfIndicators - 1 ) {\n\t\t\t\t\t\treturn 'text-before-edge';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\treturn 'text-after-edge';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'middle';\n\t\t\t\t} )();\n\n\t\t\t\tconst y = ( () => {\n\t\t\t\t\tconst bottomOfChart      = this.t + this.ah;\n\t\t\t\t\tconst distanceFromBottom = i * ( this.ah / ( numberOfIndicators - 1 ) );\n\n\t\t\t\t\treturn bottomOfChart - distanceFromBottom;\n\t\t\t\t} );\n\n\t\t\t\tconst x     = () => ( ( axis === 'y-right' ) ? this.w - this.r : this.l );\n\t\t\t\tconst x2    = () => ( ( axis === 'y-right' ) ? x() - this.aw : x() + this.aw );\n\t\t\t\tconst pathX = () => ( ( axis === 'y-right' ) ? x() - spaceBetweenLabelsAndLines : x() + spaceBetweenLabelsAndLines );\n\n\t\t\t\tconst textValue = Math.round( range.start + ( ( i / ( numberOfIndicators - 1 ) ) * rangeDifference ) );\n\t\t\t\tconst label     = transformLabel ? transformLabel( textValue ) : textValue;\n\n\t\t\t\tconst textAnchor = ( axis === 'y-right' ? 'start' : 'end' );\n\n\t\t\t\tlabelData.push( {\n\t\t\t\t\tx,\n\t\t\t\t\tx2,\n\t\t\t\t\ty,\n\t\t\t\t\ty2   : y,\n\t\t\t\t\ttext : `${label}${postChar || ''}`,\n\t\t\t\t\tpath : () => `M ${pathX()}, ${y()} L ${x2()}, ${y()}`,\n\t\t\t\t\tdominantBaseline,\n\t\t\t\t\ttextAnchor,\n\t\t\t\t\tcolor,\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst lineIndicatorGroups = this.canvas\n\t\t\t\t.selectAll( `line-indicators-${this.id}` )\n\t\t\t\t.data( labelData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'g' ) // will append as many g's as the length of labelData\n\t\t\t\t.attr( 'class', `line-indicators-${this.id}` );\n\n\t\t\tif ( options.labels !== false ) {\n\n\t\t\t\t/* draw line lables */\n\t\t\t\tconst lineLabels = lineIndicatorGroups.append( 'text' )\n\t\t\t\t\t.attr( 'class', `line-indicators label-${this.id} axis-labels dynamic-text-${this.id}` )\n\t\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t\t.style( 'font-size', '10px' )\n\t\t\t\t\t.style( 'fill', color )\n\t\t\t\t\t.text( d => d.text )\n\t\t\t\t\t.attr( 'text-anchor', d => d.textAnchor );\n\n\t\t\t\t/* right align text */\n\n\t\t\t\tconst lineLabelWidths  = Array.from( lineLabels._groups[0] ).map( a => a.getBBox().width );\n\t\t\t\tconst biggestLineLabel = Math.max( ...lineLabelWidths );\n\n\t\t\t\tconst dims = ( () => {\n\t\t\t\t\tconst newWidth = ( biggestLineLabel + spaceBetweenLabelsAndLines );\n\n\t\t\t\t\tif ( axis === 'y-right' ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tr : newWidth,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tl : newWidth,\n\t\t\t\t\t};\n\t\t\t\t} )();\n\n\t\t\t\tthis.updateDims( dims );\n\t\t\t\tthis.realignAxisLabels();\n\n\t\t\t}\n\n\t\t\t/* draw lines */\n\t\t\tlineIndicatorGroups.append( 'path' )\n\t\t\t\t.attr( 'd', d => d.path() )\n\t\t\t\t.attr( 'class', `dynamic-stroke-${this.id} axis-indicators` )\n\t\t\t\t.style( 'stroke-dasharray', '2, 4' )\n\t\t\t\t.style( 'stroke', color );\n\n\t\t\treturn lineIndicatorGroups;\n\n\t\t},\n\n\t\tdrawXAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\tvalues,\n\t\t\t\tspaceBetweenLabelsAndChart,\n\t\t\t\tlabelStyle,\n\t\t\t} = options;\n\t\t\tconsole.log( values );\n\t\t\tconst getX = ( i ) => {\n\t\t\t\tconst { aw, l } = this;\n\t\t\t\tconst ret = l + ( ( aw / ( values.length + 1 ) ) * ( i + 1 ) );\n\t\t\t\tconsole.log( ret );\n\t\t\t\treturn ret;\n\t\t\t};\n\n\t\t\tconst xAxisData = values.map( ( datum, i ) => {\n\t\t\t\tconst y = () => ( ( axis === 'x-top' ) ? this.t : this.t + this.ah );\n\t\t\t\tconst x = () => getX( i );\n\n\t\t\t\treturn {\n\t\t\t\t\t...datum,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\ttextAnchor       : 'middle',\n\t\t\t\t\tdominantBaseline : ( axis === 'x-top' ) ? 'text-before-edge' : 'text-after-edge',\n\t\t\t\t};\n\t\t\t} );\n\n\t\t\tconst xAxisLabels = this.canvas\n\t\t\t\t.selectAll( 'x-axis-labels axis-label' )\n\t\t\t\t.data( xAxisData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'text-anchor', d => d.textAnchor )\n\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t.style( 'fill', d => d.color )\n\t\t\t\t.text( d => d.label );\n\n\t\t\tif ( labelStyle ) {\n\t\t\t\tthis.applyMethods( xAxisLabels, 'style', labelStyle );\n\t\t\t}\n\n\t\t\tconst xAxisLabelDims    = Array.from( xAxisLabels._groups[0] ).map( a => a.getBBox() );\n\t\t\tconst xAxisLabelHeights = xAxisLabelDims.map( a => a.height );\n\t\t\t// const xAxisLabelWidths  = xAxisLabelDims.map( a => a.width );\n\t\t\tconst biggestXAxisLabel = Math.max( ...xAxisLabelHeights );\n\n\t\t\tconst dims = ( () => {\n\t\t\t\tif ( axis === 'y-top' ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tt : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tb : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t};\n\t\t\t} )();\n\n\t\t\tthis.updateDims( dims );\n\t\t\tthis.realignAxisLabels();\n\t\t\treturn xAxisData;\n\n\t\t},\n\n\t\tapplyMethods( nodes, method, options = [] ) {\n\t\t\toptions.reduce( ( d3item, option ) => {\n\t\t\t\tconst [prop, value] = option;\n\n\t\t\t\treturn d3item[method]( prop, ( d ) => {\n\t\t\t\t\tif ( typeof value === 'function' ) {\n\t\t\t\t\t\treturn value( d );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t} );\n\t\t\t}, nodes );\n\t\t},\n\n\t\tgetDataRange( yValues, scaled ) {\n\t\t\tconst biggest    = Math.max( ...yValues );\n\t\t\tconst smallest   = Math.min( ...yValues );\n\t\t\tconst difference = ( biggest - smallest );\n\t\t\tif ( difference === 0 ) {\n\n\t\t\t\tlet power = 0;\n\n\t\t\t\twhile ( biggest / ( 10 ** power ) > 10 ) {\n\t\t\t\t\tpower += 1;\n\t\t\t\t}\n\n\t\t\t\tconst increment = 10 ** power;\n\n\t\t\t\treturn {\n\t\t\t\t\tstart : scaled ? Math.floor( biggest / increment ) * increment : 0,\n\t\t\t\t\tend   : Math.ceil( biggest / increment ) * increment,\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// factor of ten to multiply\n\t\t\t// for the label's scale\n\t\t\tconst scale = ( () => {\n\n\t\t\t\tlet power = 0;\n\n\t\t\t\twhile ( difference / ( 10 ** power ) > 10 ) {\n\t\t\t\t\tpower += 1;\n\t\t\t\t}\n\n\t\t\t\treturn power;\n\n\t\t\t} )();\n\t\t\tconst relevantIncrement =  10 ** scale;\n\n\t\t\t// we'll start by trying to do a\n\t\t\t// scale from the closest instance of\n\t\t\t// our relevant increment to a point\n\t\t\t// four more relevantIncrements away\n\t\t\tconst start = !scaled ? 0 : ( Math.floor( smallest / relevantIncrement ) * relevantIncrement );\n\t\t\tconst range = ( Math.ceil( ( difference + smallest - start ) / relevantIncrement ) ) * relevantIncrement;\n\t\t\tconst end   = start + range;\n\n\t\t\treturn {\n\t\t\t\tstart,\n\t\t\t\tend,\n\t\t\t};\n\t\t},\n\n\t\tgetYValue( value, range ) {\n\t\t\tconst { t, ah } = this;\n\t\t\tconst { end, start } = range;\n\n\t\t\tconst fraction = ( value - start ) / ( end - start );\n\n\t\t\treturn t + ( ah - ( fraction * ah ) );\n\t\t},\n\n\t\tgetLinearFunctionFromTwoPoints( pointOne, pointTwo ) {\n\t\t\treturn ( x ) => {\n\t\t\t\t// rise over run. important\n\t\t\t\tconst slope = ( pointOne.y() - pointTwo.y() ) / ( pointOne.x() - pointTwo.x() );\n\n\t\t\t\t// b = y - m(x);\n\t\t\t\tconst b = pointOne.y() - ( slope * pointOne.x() );\n\n\t\t\t\t// y = m(x) + b;\n\t\t\t\treturn ( slope * x ) + b;\n\t\t\t};\n\t\t},\n\n\t\twrapText( text, width ) {\n\n\t\t\tconst nodes = Array.from( text._groups[0] );\n\n\t\t\tnodes.forEach( ( node ) => {\n\t\t\t\tconst textNode   = d3.select( node );\n\t\t\t\tconst totalWords = textNode\n\t\t\t\t\t.text()\n\t\t\t\t\t.split( /\\s+/ )\n\t\t\t\t\t.reverse();\n\n\t\t\t\tconst lineHeight = 1.1; // ems\n\t\t\t\tconst y          = textNode.attr( 'y' );\n\t\t\t\tconst x          = textNode.attr( 'x' );\n\t\t\t\tconst dy         = parseFloat( textNode.attr( 'dy' ) ) || 0;\n\n\t\t\t\tlet tspan = textNode\n\t\t\t\t\t.text( null )\n\t\t\t\t\t.append( 'tspan' )\n\t\t\t\t\t.attr( 'x', x )\n\t\t\t\t\t.attr( 'y', y )\n\t\t\t\t\t.attr( 'dy', `${dy}em` );\n\n\t\t\t\tlet line       = [];\n\t\t\t\tlet lineNumber = 0;\n\t\t\t\twhile ( totalWords.length ) {\n\t\t\t\t\tconst word = totalWords.pop();\n\n\t\t\t\t\t// add this word to the line\n\t\t\t\t\tline.push( word );\n\n\t\t\t\t\t// set the tspan's content to\n\t\t\t\t\t// the value of our line\n\t\t\t\t\ttspan.text( line.join( ' ' ) );\n\n\t\t\t\t\t// determine if the line is now\n\t\t\t\t\t// overflowing\n\t\t\t\t\tconst textLength = tspan\n\t\t\t\t\t\t.node()\n\t\t\t\t\t\t.getComputedTextLength();\n\n\t\t\t\t\tconst overflowing = textLength > width;\n\n\t\t\t\t\tif ( overflowing ) {\n\t\t\t\t\t\t// remove that word, as it was\n\t\t\t\t\t\t// too long\n\t\t\t\t\t\tline.pop();\n\n\t\t\t\t\t\t// reset the text to the line without\n\t\t\t\t\t\t// the word that overflowed\n\t\t\t\t\t\ttspan.text( line.join( ' ' ) );\n\n\t\t\t\t\t\t// put this word in the next line\n\t\t\t\t\t\tline = [word];\n\n\t\t\t\t\t\t// add a new tsapn\n\t\t\t\t\t\ttspan = textNode\n\t\t\t\t\t\t\t.append( 'tspan' )\n\t\t\t\t\t\t\t.attr( 'x', x )\n\t\t\t\t\t\t\t.attr( 'y', y )\n\t\t\t\t\t\t\t.attr( 'dy', `${( ++lineNumber * lineHeight ) + dy}em` )\n\t\t\t\t\t\t\t.text( word );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextNode.selectAll( 'tspan' )\n\t\t\t\t\t.attr( 'dy', ( d, i, tspans ) => {\n\n\t\t\t\t\t\tconst numberOfLines = Array.from( tspans )\n\t\t\t\t\t\t\t.filter( a => a.innerHTML !== '' )\n\t\t\t\t\t\t\t.length - 1;\n\n\t\t\t\t\t\tconst tspanNode  = tspans[i];\n\t\t\t\t\t\tconst startingDy = parseFloat( d3.select( tspanNode ).attr( 'dy' ), 10 );\n\n\t\t\t\t\t\tconst halfTotalTextHeight = ( ( numberOfLines / 2 ) * lineHeight );\n\t\t\t\t\t\tconst linePosition        = ( lineHeight * lineNumber );\n\n\t\t\t\t\t\t// centers the wrapper text\n\t\t\t\t\t\treturn `${( startingDy || 0 ) - linePosition + halfTotalTextHeight}em`;\n\n\t\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\n\t\tpathFromPoints( points, closed = true ) {\n\n\t\t\tconst endCharacter = closed ? ' Z' : '';\n\t\t\tconst path         = points.reduce( ( a, b, i ) => {\n\n\t\t\t\tif ( typeof a !== 'object' ) {\n\t\t\t\t\treturn `${a} L ${b.x} ${b.y}${i === ( points.length - 1 ) ? endCharacter : ''}`;\n\t\t\t\t}\n\n\t\t\t\treturn `M ${b.x} ${b.y}`;\n\n\t\t\t}, {} );\n\n\t\t\treturn path;\n\n\t\t},\n\t},\n};\n</script>\n"],"sourceRoot":"src/components/charts"}]}
{"remainingRequest":"/Users/brianphan/jets/kf-grower-portal/node_modules/babel-loader/lib/index.js!/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brianphan/jets/kf-grower-portal/src/components/charts/StackedBarChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brianphan/jets/kf-grower-portal/src/components/charts/StackedBarChart.vue","mtime":1617753126833},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brianphan/jets/kf-grower-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["StackedBarChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang='pug'>\n\t.chart\n\t\tsvg(ref='svg')\n\t\t.legend\n\t\t\tchart-legend(:legend='this.legend'\n\t\t\tcolumns=1)\n</template>\n\n<script>\nimport formatNumber from '@/lib/utils/formatNumber';\nimport colors from '@/assets/js/colors';\nimport BaseChart from './BaseChart';\nimport ChartLegend from '../ChartLegend';\n\nexport default {\n\tname       : 'stacked-bar-chart',\n\textends    : BaseChart,\n\tcomponents : {\n\t\tChartLegend\n\t},\n\tprops : {\n\t\tchart : {\n\t\t\ttype : Object,\n\t\t},\n\t\tlegend : {\n\t\t\ttype : Object,\n\n\t\t}\n\t},\n\n\tdata : () => ( {\n\t\t// nothing yet\n\t} ),\n\tcomputed : {\n\t\tbarWidth() {\n\t\t\tconst { aw } = this;\n\t\t\treturn Math.min( aw / this.chart.data.length, 70 );\n\t\t},\n\t\tbarSpacing() {\n\t\t\tconst { barWidth, aw } = this;\n\t\t\tconsole.log( barWidth );\n\t\t\treturn ( aw - ( barWidth * this.chart.data.length ) ) / this.chart.data.length;\n\t\t},\n\t\tlabelTextSize() {\n\t\t\treturn this.barWidth * 0.55;\n\t\t}\n\t},\n\tmounted() {\n\t\tthis.init( this.$refs.svg );\n\t},\n\tmethods : {\n\t\tdraw() {\n\t\t\tconst { values } = this.chart.data[0];\n\t\t\tconst yValues = Object.keys( values ).map( key => values[key] );\n\t\t\tconst sum = Object.keys( values ).reduce( ( total, key ) => total + values[key], 0 );\n\t\t\t// const yValues = this.chart.data[0].map( datum => datum.value );\n\t\t\tconst range   = { start : 0, end : sum };\n\n\t\t\t// draw y-axis labels\n\t\t\tconst yAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis           : 'y-right',\n\t\t\t\ttransformLabel : text => formatNumber( text ),\n\t\t\t\tlines          : {\n\t\t\t\t\tnumberOfIndicators         : 6,\n\t\t\t\t\tspaceBetweenLabelsAndLines : 10,\n\t\t\t\t},\n\t\t\t\tcolor : colors.colorPrimary,\n\t\t\t\trange,\n\t\t\t} );\n\t\t\t// console.log( yAxisData );\n\t\t\t// draw x-axis labels\n\t\t\tconst xAxisData = this.drawAxisIndicators( {\n\t\t\t\taxis                       : 'x-bottom',\n\t\t\t\tvalues                     : this.chart.data,\n\t\t\t\tspaceBetweenLabelsAndChart : 10,\n\t\t\t\tlabelStyle                 : [\n\t\t\t\t\t['font-size', '14px'],\n\t\t\t\t\t['font-weight', '700'],\n\t\t\t\t\t['font-family', '\"Manjari\", sans-serif'],\n\t\t\t\t],\n\t\t\t} );\n\t\t\t// xAxisData.forEach( ( item, key ) => console.log( getX( key ) ) );\n\t\t\t// Compute the position and size of the bars\n\t\t\tconst barData   = this.myComputeBarData( xAxisData );\n\t\t\t// console.log( barData );\n\t\t\tconst barGroups = barData.map( variety => this.drawBars( variety ) );\n\t\t\tconsole.log( barGroups );\n\t\t\t// barGroups.forEach( grouping => grouping._groups[0].forEach( g => console.log( g.__data__.text ) ) );\n\t\t\tbarGroups.forEach( grouping => this.drawBarLabels( grouping ) );\n\n\t\t},\n\n\t\t// repeat for each item in data\n\t\tmyComputeBarData( xDims ) {\n\t\t\tconst totalData = this.chart.data.map( ( entry, i ) => {\n\t\t\t\tconst barKeys = Object.keys( entry.values );\n\t\t\t\tconst sum = barKeys.reduce( ( total, j ) => total + entry.values[j], 0 );\n\t\t\t\tlet runningSum = 0;\n\t\t\t\treturn barKeys.map( ( key ) => {\n\t\t\t\t// get the value and the height\n\t\t\t\t\tconst value  = entry.values[key];\n\t\t\t\t\tconst height = ( value / sum ) * this.ah;\n\t\t\t\t\t// determine the y value for the bar\n\t\t\t\t\tconst y = this.t + ( ( runningSum / sum ) * this.ah );\n\t\t\t\t\t// add to running sum so we can\n\t\t\t\t\t// do y value calculations\n\t\t\t\t\trunningSum += value;\n\t\t\t\t\treturn {\n\t\t\t\t\t\twidth : this.barWidth, // 30px on each side\n\t\t\t\t\t\tcolor : this.legend[key].color,\n\t\t\t\t\t\ttext  : formatNumber( value ),\n\t\t\t\t\t\tx     : this.getX( i ), // 30px to the left\n\t\t\t\t\t\ty,\n\t\t\t\t\t\theight,\n\t\t\t\t\t};\n\t\t\t\t} );\n\t\t\t} );\n\t\t\treturn totalData;\n\n\t\t},\n\n\t\tdrawBars( barData ) {\n\t\t\t// Draw the bars\n\t\t\tconst barGroups = this.canvas.selectAll( `bars-${this.id}` )\n\t\t\t\t.data( barData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'g' );\n\t\t\tbarGroups\n\t\t\t\t.append( 'rect' )\n\t\t\t\t.attr( 'x', d => d.x )\n\t\t\t\t.attr( 'y', d => d.y )\n\t\t\t\t.attr( 'fill', d => d.color )\n\t\t\t\t.attr( 'opacity', 0.80 )\n\t\t\t\t.attr( 'height', d => d.height )\n\t\t\t\t.attr( 'width', d => d.width )\n\t\t\t\t.attr( 'class', `bar-${this.id} translate-${this.id}` );\n\n\t\t\treturn barGroups;\n\t\t},\n\t\tdrawBarLabels( barGroups ) {\n\t\t\tbarGroups\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'class', `text-node-${this.id} translate-${this.id}` )\n\t\t\t\t.attr( 'x', d => ( d.x - d.width / 8 ) ) // change later to calculated value\n\t\t\t\t.attr( 'y', d => ( d.y + ( d.height + d.y ) ) / 2 - d.height / 4 )\n\t\t\t\t.attr( 'fill', d => d.color )\n\t\t\t\t.style( 'font-family', 'Bitter' )\n\t\t\t\t.attr( 'text-anchor', 'end' )\n\t\t\t\t.attr( 'dominant-baseline', 'text-before-edge' )\n\t\t\t\t// .style( 'opacity', 0 )\n\t\t\t\t.text( d => d.text );\n\t\t},\n\t\tdrawXAxisIndicators( options ) {\n\t\t\tconst {\n\t\t\t\taxis,\n\t\t\t\tvalues,\n\t\t\t\tspaceBetweenLabelsAndChart,\n\t\t\t\tlabelStyle,\n\t\t\t} = options;\n\n\t\t\tconst getX = ( i ) => {\n\t\t\t\tconst { aw, l } = this;\n\n\t\t\t\treturn l + ( ( aw / ( values.length + 1 ) ) * ( i + 1 ) );\n\t\t\t};\n\n\t\t\tconst xAxisData = values.map( ( datum, i ) => {\n\t\t\t\tconst y = () => ( ( axis === 'x-top' ) ? this.t : this.t + this.ah );\n\t\t\t\tconst x = () => getX( i );\n\n\t\t\t\treturn {\n\t\t\t\t\t...datum,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\ttextAnchor       : 'middle',\n\t\t\t\t\tdominantBaseline : ( axis === 'x-top' ) ? 'text-before-edge' : 'text-after-edge',\n\t\t\t\t};\n\t\t\t} );\n\n\t\t\tconst xAxisLabels = this.canvas\n\t\t\t\t.selectAll( 'x-axis-labels axis-label' )\n\t\t\t\t.data( xAxisData )\n\t\t\t\t.enter()\n\t\t\t\t.append( 'text' )\n\t\t\t\t.attr( 'text-anchor', d => d.textAnchor )\n\t\t\t\t.attr( 'x', d => d.x() )\n\t\t\t\t.attr( 'y', d => d.y() )\n\t\t\t\t.attr( 'dominant-baseline', d => d.dominantBaseline )\n\t\t\t\t.style( 'fill', d => d.color )\n\t\t\t\t.text( d => d.label );\n\n\t\t\tif ( labelStyle ) {\n\t\t\t\tthis.applyMethods( xAxisLabels, 'style', labelStyle );\n\t\t\t}\n\n\t\t\tconst xAxisLabelDims    = Array.from( xAxisLabels._groups[0] ).map( a => a.getBBox() );\n\t\t\tconst xAxisLabelHeights = xAxisLabelDims.map( a => a.height );\n\t\t\t// const xAxisLabelWidths  = xAxisLabelDims.map( a => a.width );\n\t\t\tconst biggestXAxisLabel = Math.max( ...xAxisLabelHeights );\n\n\t\t\tconst dims = ( () => {\n\t\t\t\tif ( axis === 'y-top' ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tt : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tb : biggestXAxisLabel + spaceBetweenLabelsAndChart,\n\t\t\t\t};\n\t\t\t} )();\n\n\t\t\tthis.updateDims( dims );\n\t\t\tthis.realignAxisLabels();\n\n\t\t\t// ? center texts as necessary\n\t\t\t// const totalTextSpace = xAxisLabelWidths.reduce( ( sum, w ) => sum + w, 0 );\n\t\t\t// const leftOverSpace  = this.aw - totalTextSpace;\n\t\t\t// const spaceAround    = ( leftOverSpace / ( values.length + 1 ) );\n\n\t\t\treturn xAxisLabelDims;\n\n\t\t},\n\t\tgetX( i ) {\n\t\t\tconst {\n\t\t\t\tl,\n\t\t\t\tbarWidth,\n\t\t\t\tbarSpacing,\n\t\t\t} = this;\n\t\t\tconst x = l + ( barWidth * i ) + ( barSpacing * i ) + ( barSpacing / 2 );\n\t\t\treturn x;\n\t\t},\n\n\t}\n};\n</script>\n\n<style lang='scss'>\n\t.chart{\n\t\t// display: flex;\n\t\t// align-items: stretch;\n\t\t// width: 100%;\n\t\t// height: 300px;\n\t\theight: 100%;\n\t\twidth: 100%;\n\n\t\tsvg {\n\t\t// flex: 2 2 0\n\t\theight: 100%;\n\t\twidth: 70%\n\t\t};\n\t\t.legend{\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: top;\n\t\t}\n\t}\n\n</style>\n"],"sourceRoot":"src/components/charts"}]}